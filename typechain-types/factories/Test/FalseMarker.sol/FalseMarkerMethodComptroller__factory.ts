/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  FalseMarkerMethodComptroller,
  FalseMarkerMethodComptrollerInterface,
} from "../../../Test/FalseMarker.sol/FalseMarkerMethodComptroller";

const _abi = [
  {
    constant: true,
    inputs: [],
    name: "isComptroller",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060868061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060275760003560e01c80627e3dd214602c575b600080fd5b6032604c565b604051808215151515815260200191505060405180910390f35b60008156fea265627a7a7231582044bbf7c9edfce01698a2f77956aaa94d8e9cc5ec4c12ac00bb7a9b0a580f840764736f6c63430005100032";

type FalseMarkerMethodComptrollerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FalseMarkerMethodComptrollerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FalseMarkerMethodComptroller__factory extends ContractFactory {
  constructor(...args: FalseMarkerMethodComptrollerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FalseMarkerMethodComptroller> {
    return super.deploy(
      overrides || {}
    ) as Promise<FalseMarkerMethodComptroller>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FalseMarkerMethodComptroller {
    return super.attach(address) as FalseMarkerMethodComptroller;
  }
  override connect(signer: Signer): FalseMarkerMethodComptroller__factory {
    return super.connect(signer) as FalseMarkerMethodComptroller__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FalseMarkerMethodComptrollerInterface {
    return new utils.Interface(_abi) as FalseMarkerMethodComptrollerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FalseMarkerMethodComptroller {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as FalseMarkerMethodComptroller;
  }
}
