/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  MockReference,
  MockReferenceInterface,
} from "../../Test/MockReference";

const _abi = [
  {
    constant: true,
    inputs: [
      {
        internalType: "string[]",
        name: "_bases",
        type: "string[]",
      },
      {
        internalType: "string[]",
        name: "_quotes",
        type: "string[]",
      },
    ],
    name: "getRefenceDataBulk",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "rate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastUpdatedBase",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastUpdatedQuote",
            type: "uint256",
          },
        ],
        internalType: "struct MockReference.ReferenceData[]",
        name: "",
        type: "tuple[]",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "string",
        name: "_base",
        type: "string",
      },
      {
        internalType: "string",
        name: "_quote",
        type: "string",
      },
    ],
    name: "getReferenceData",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "rate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastUpdatedBase",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastUpdatedQuote",
            type: "uint256",
          },
        ],
        internalType: "struct MockReference.ReferenceData",
        name: "",
        type: "tuple",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "string",
        name: "_base",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "rate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lastUpdatedBase",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lastUpdatedQuote",
        type: "uint256",
      },
    ],
    name: "setReferenceData",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061077a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80631be0ac6a1461004657806365555bcc14610076578063737ef0db146100a6575b600080fd5b610060600480360361005b9190810190610397565b6100c2565b60405161006d9190610686565b60405180910390f35b610090600480360361008b919081019061040c565b6101ee565b60405161009d91906106a8565b60405180910390f35b6100c060048036036100bb9190810190610481565b610249565b005b6060808585905060405190808252806020026020018201604052801561010257816020015b6100ef6102ac565b8152602001906001900390816100e75790505b50905060008090505b868690508110156101e157600087878381811061012457fe5b905060200281018035600160200383360303811261014157600080fd5b8083019250508135905060208201915067ffffffffffffffff81111561016657600080fd5b60018102360382131561017857600080fd5b604051610186929190610654565b908152602001604051809103902060405180606001604052908160008201548152602001600182015481526020016002820154815250508282815181106101c957fe5b6020026020010181905250808060010191505061010b565b5080915050949350505050565b6101f66102cd565b6000858560405161020892919061066d565b908152602001604051809103902060405180606001604052908160008201548152602001600182015481526020016002820154815250509050949350505050565b6040518060600160405280848152602001838152602001828152506000868660405161027692919061066d565b90815260200160405180910390206000820151816000015560208201518160010155604082015181600201559050505050505050565b60405180606001604052806000815260200160008152602001600081525090565b60405180606001604052806000815260200160008152602001600081525090565b60008083601f84011261030057600080fd5b8235905067ffffffffffffffff81111561031957600080fd5b60208301915083602082028301111561033157600080fd5b9250929050565b60008083601f84011261034a57600080fd5b8235905067ffffffffffffffff81111561036357600080fd5b60208301915083600182028301111561037b57600080fd5b9250929050565b60008135905061039181610720565b92915050565b600080600080604085870312156103ad57600080fd5b600085013567ffffffffffffffff8111156103c757600080fd5b6103d3878288016102ee565b9450945050602085013567ffffffffffffffff8111156103f257600080fd5b6103fe878288016102ee565b925092505092959194509250565b6000806000806040858703121561042257600080fd5b600085013567ffffffffffffffff81111561043c57600080fd5b61044887828801610338565b9450945050602085013567ffffffffffffffff81111561046757600080fd5b61047387828801610338565b925092505092959194509250565b60008060008060006080868803121561049957600080fd5b600086013567ffffffffffffffff8111156104b357600080fd5b6104bf88828901610338565b955095505060206104d288828901610382565b93505060406104e388828901610382565b92505060606104f488828901610382565b9150509295509295909350565b600061050d8383610603565b60608301905092915050565b6000610524826106d3565b61052e81856106eb565b9350610539836106c3565b8060005b8381101561056a5781516105518882610501565b975061055c836106de565b92505060018101905061053d565b5085935050505092915050565b600061058383856106fc565b9350610590838584610711565b82840190509392505050565b60006105a883856106fc565b93506105b5838584610711565b82840190509392505050565b6060820160008201516105d76000850182610645565b5060208201516105ea6020850182610645565b5060408201516105fd6040850182610645565b50505050565b6060820160008201516106196000850182610645565b50602082015161062c6020850182610645565b50604082015161063f6040850182610645565b50505050565b61064e81610707565b82525050565b600061066182848661059c565b91508190509392505050565b600061067a828486610577565b91508190509392505050565b600060208201905081810360008301526106a08184610519565b905092915050565b60006060820190506106bd60008301846105c1565b92915050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b6000819050919050565b82818337600083830152505050565b61072981610707565b811461073457600080fd5b5056fea365627a7a7231582029d024052af31298a0a614b0a5aad0cd87520fac92e971c5f928b3a906f5a7446c6578706572696d656e74616cf564736f6c63430005100040";

type MockReferenceConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockReferenceConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockReference__factory extends ContractFactory {
  constructor(...args: MockReferenceConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockReference> {
    return super.deploy(overrides || {}) as Promise<MockReference>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockReference {
    return super.attach(address) as MockReference;
  }
  override connect(signer: Signer): MockReference__factory {
    return super.connect(signer) as MockReference__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockReferenceInterface {
    return new utils.Interface(_abi) as MockReferenceInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockReference {
    return new Contract(address, _abi, signerOrProvider) as MockReference;
  }
}
