/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  MockLiquidityMining,
  MockLiquidityMiningInterface,
} from "../../Test/MockLiquidityMining";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_comptroller",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    constant: true,
    inputs: [],
    name: "comptroller",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "address",
        name: "bToken",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "accounts",
        type: "address[]",
      },
    ],
    name: "updateBorrowIndex",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "address",
        name: "bToken",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "accounts",
        type: "address[]",
      },
    ],
    name: "updateSupplyIndex",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516102ba3803806102ba8339818101604052602081101561003357600080fd5b8101908080519060200190929190505050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610226806100946000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80635fe3b567146100465780639222e57214610090578063e3cec1a214610129575b600080fd5b61004e6101c2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610127600480360360408110156100a657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156100e357600080fd5b8201836020820111156100f557600080fd5b8035906020019184602083028401116401000000008311171561011757600080fd5b90919293919293905050506101e7565b005b6101c06004803603604081101561013f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561017c57600080fd5b82018360208201111561018e57600080fd5b803590602001918460208302840111640100000000831117156101b057600080fd5b90919293919293905050506101ec565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b505050565b50505056fea265627a7a7231582045da1c420ab554bdbec1298d8c29addec525a0e35256d467410cebbcd240b13164736f6c63430005100032";

type MockLiquidityMiningConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockLiquidityMiningConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockLiquidityMining__factory extends ContractFactory {
  constructor(...args: MockLiquidityMiningConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _comptroller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockLiquidityMining> {
    return super.deploy(
      _comptroller,
      overrides || {}
    ) as Promise<MockLiquidityMining>;
  }
  override getDeployTransaction(
    _comptroller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_comptroller, overrides || {});
  }
  override attach(address: string): MockLiquidityMining {
    return super.attach(address) as MockLiquidityMining;
  }
  override connect(signer: Signer): MockLiquidityMining__factory {
    return super.connect(signer) as MockLiquidityMining__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockLiquidityMiningInterface {
    return new utils.Interface(_abi) as MockLiquidityMiningInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockLiquidityMining {
    return new Contract(address, _abi, signerOrProvider) as MockLiquidityMining;
  }
}
