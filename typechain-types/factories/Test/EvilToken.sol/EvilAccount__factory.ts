/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  EvilAccount,
  EvilAccountInterface,
} from "../../../Test/EvilToken.sol/EvilAccount";

const _abi = [
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_crEth",
        type: "address",
      },
      {
        internalType: "address",
        name: "_crEvilToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_borrowAmount",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    payable: true,
    stateMutability: "payable",
    type: "fallback",
  },
  {
    constant: false,
    inputs: [],
    name: "attackBorrow",
    outputs: [],
    payable: true,
    stateMutability: "payable",
    type: "function",
  },
  {
    constant: false,
    inputs: [],
    name: "tokensReceived",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516106f73803806106f78339818101604052606081101561003357600080fd5b81019080805190602001909291908051906020019092919080519060200190929190505050826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600281905550505050610605806100f26000396000f3fe6080604052600436106100295760003560e01c80630773b5661461002b5780633bb0cc5514610035575b005b61003361004c565b005b34801561004157600080fd5b5061004a6104a7565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631249c58b346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156100b557600080fd5b505af11580156100c9573d6000803e3d6000fd5b505050505060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635fe3b5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561013757600080fd5b505afa15801561014b573d6000803e3d6000fd5b505050506040513d602081101561016157600080fd5b81019080805190602001909291905050509050606060016040519080825280602002602001820160405280156101a65781602001602082028038833980820191505090505b5090506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816000815181106101d857fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1663c2998238826040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019060200280838360005b83811015610281578082015181840152602081019050610266565b5050505090500192505050600060405180830381600087803b1580156102a657600080fd5b505af11580156102ba573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156102e457600080fd5b810190808051604051939291908464010000000082111561030457600080fd5b8382019150602082018581111561031a57600080fd5b825186602082028301116401000000008211171561033757600080fd5b8083526020830192505050908051906020019060200280838360005b8381101561036e578082015181840152602081019050610353565b50505050905001604052505050506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c5ebeaec6002546040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b1580156103f557600080fd5b505af1158015610409573d6000803e3d6000fd5b505050506040513d602081101561041f57600080fd5b8101908080519060200190929190505050146104a3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f666972737420626f72726f77206661696c65640000000000000000000000000081525060200191505060405180910390fd5b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c5ebeaec6002546040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561051f57600080fd5b505af1158015610533573d6000803e3d6000fd5b505050506040513d602081101561054957600080fd5b810190808051906020019092919050505014156105ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f7265656e74727920626f72726f7720737563636565640000000000000000000081525060200191505060405180910390fd5b56fea265627a7a723158206d7e08ba9b7bea43b924d715ef58af572279d356812b6fdf96a14cd07ceb9e2964736f6c63430005100032";

type EvilAccountConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EvilAccountConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EvilAccount__factory extends ContractFactory {
  constructor(...args: EvilAccountConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _crEth: PromiseOrValue<string>,
    _crEvilToken: PromiseOrValue<string>,
    _borrowAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<EvilAccount> {
    return super.deploy(
      _crEth,
      _crEvilToken,
      _borrowAmount,
      overrides || {}
    ) as Promise<EvilAccount>;
  }
  override getDeployTransaction(
    _crEth: PromiseOrValue<string>,
    _crEvilToken: PromiseOrValue<string>,
    _borrowAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _crEth,
      _crEvilToken,
      _borrowAmount,
      overrides || {}
    );
  }
  override attach(address: string): EvilAccount {
    return super.attach(address) as EvilAccount;
  }
  override connect(signer: Signer): EvilAccount__factory {
    return super.connect(signer) as EvilAccount__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EvilAccountInterface {
    return new utils.Interface(_abi) as EvilAccountInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): EvilAccount {
    return new Contract(address, _abi, signerOrProvider) as EvilAccount;
  }
}
