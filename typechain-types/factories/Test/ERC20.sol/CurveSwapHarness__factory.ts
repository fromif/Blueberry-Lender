/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  CurveSwapHarness,
  CurveSwapHarnessInterface,
} from "../../../Test/ERC20.sol/CurveSwapHarness";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_virtualPrice",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    constant: true,
    inputs: [],
    name: "get_virtual_price",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516100e13803806100e18339818101604052602081101561003357600080fd5b8101908080519060200190929190505050806000819055505060878061005a6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063bb7b8b8014602d575b600080fd5b60336049565b6040518082815260200191505060405180910390f35b6000805490509056fea265627a7a723158203b2a81b46b1cf6f409f9122bbc185e3bb1a5ea9341bad2e98cc20a3f5234537464736f6c63430005100032";

type CurveSwapHarnessConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CurveSwapHarnessConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CurveSwapHarness__factory extends ContractFactory {
  constructor(...args: CurveSwapHarnessConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _virtualPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CurveSwapHarness> {
    return super.deploy(
      _virtualPrice,
      overrides || {}
    ) as Promise<CurveSwapHarness>;
  }
  override getDeployTransaction(
    _virtualPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_virtualPrice, overrides || {});
  }
  override attach(address: string): CurveSwapHarness {
    return super.attach(address) as CurveSwapHarness;
  }
  override connect(signer: Signer): CurveSwapHarness__factory {
    return super.connect(signer) as CurveSwapHarness__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CurveSwapHarnessInterface {
    return new utils.Interface(_abi) as CurveSwapHarnessInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CurveSwapHarness {
    return new Contract(address, _abi, signerOrProvider) as CurveSwapHarness;
  }
}
