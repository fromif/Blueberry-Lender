/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  BDelegatorInterface,
  BDelegatorInterfaceInterface,
} from "../../BTokenInterfaces.sol/BDelegatorInterface";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldImplementation",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
    ],
    name: "NewImplementation",
    type: "event",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "address",
        name: "implementation_",
        type: "address",
      },
      {
        internalType: "bool",
        name: "allowResign",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "becomeImplementationData",
        type: "bytes",
      },
    ],
    name: "_setImplementation",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class BDelegatorInterface__factory {
  static readonly abi = _abi;
  static createInterface(): BDelegatorInterfaceInterface {
    return new utils.Interface(_abi) as BDelegatorInterfaceInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BDelegatorInterface {
    return new Contract(address, _abi, signerOrProvider) as BDelegatorInterface;
  }
}
