/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  BSupplyCapStorage,
  BSupplyCapStorageInterface,
} from "../../BTokenInterfaces.sol/BSupplyCapStorage";

const _abi = [
  {
    constant: true,
    inputs: [],
    name: "internalCash",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060848061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806322abdbf514602d575b600080fd5b60336049565b6040518082815260200191505060405180910390f35b6000548156fea265627a7a7231582060a29b1c193edb06927c1547beee8ebbe781e41f97f3f040f3988e35f551f0b564736f6c63430005100032";

type BSupplyCapStorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BSupplyCapStorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BSupplyCapStorage__factory extends ContractFactory {
  constructor(...args: BSupplyCapStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BSupplyCapStorage> {
    return super.deploy(overrides || {}) as Promise<BSupplyCapStorage>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BSupplyCapStorage {
    return super.attach(address) as BSupplyCapStorage;
  }
  override connect(signer: Signer): BSupplyCapStorage__factory {
    return super.connect(signer) as BSupplyCapStorage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BSupplyCapStorageInterface {
    return new utils.Interface(_abi) as BSupplyCapStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BSupplyCapStorage {
    return new Contract(address, _abi, signerOrProvider) as BSupplyCapStorage;
  }
}
