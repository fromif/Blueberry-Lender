/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface CounterInterface extends utils.Interface {
  functions: {
    "count()": FunctionFragment;
    "count2()": FunctionFragment;
    "decrement(uint256)": FunctionFragment;
    "doRevert()": FunctionFragment;
    "increment(uint256)": FunctionFragment;
    "increment(uint256,uint256)": FunctionFragment;
    "notZero()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "count"
      | "count2"
      | "decrement"
      | "doRevert"
      | "increment(uint256)"
      | "increment(uint256,uint256)"
      | "notZero"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "count", values?: undefined): string;
  encodeFunctionData(functionFragment: "count2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decrement",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "doRevert", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increment(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "increment(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "notZero", values?: undefined): string;

  decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "count2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decrement", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "doRevert", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increment(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increment(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "notZero", data: BytesLike): Result;

  events: {};
}

export interface Counter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CounterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    count(overrides?: CallOverrides): Promise<[BigNumber]>;

    count2(overrides?: CallOverrides): Promise<[BigNumber]>;

    decrement(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    doRevert(overrides?: CallOverrides): Promise<[void]>;

    "increment(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "increment(uint256,uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      amount2: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    notZero(overrides?: CallOverrides): Promise<[void]>;
  };

  count(overrides?: CallOverrides): Promise<BigNumber>;

  count2(overrides?: CallOverrides): Promise<BigNumber>;

  decrement(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  doRevert(overrides?: CallOverrides): Promise<void>;

  "increment(uint256)"(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "increment(uint256,uint256)"(
    amount: PromiseOrValue<BigNumberish>,
    amount2: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  notZero(overrides?: CallOverrides): Promise<void>;

  callStatic: {
    count(overrides?: CallOverrides): Promise<BigNumber>;

    count2(overrides?: CallOverrides): Promise<BigNumber>;

    decrement(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    doRevert(overrides?: CallOverrides): Promise<void>;

    "increment(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "increment(uint256,uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      amount2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    notZero(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    count(overrides?: CallOverrides): Promise<BigNumber>;

    count2(overrides?: CallOverrides): Promise<BigNumber>;

    decrement(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    doRevert(overrides?: CallOverrides): Promise<BigNumber>;

    "increment(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "increment(uint256,uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      amount2: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    notZero(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    count2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decrement(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    doRevert(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "increment(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "increment(uint256,uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      amount2: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    notZero(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
