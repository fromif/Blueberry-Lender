/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface MockRegistryInterface extends utils.Interface {
  functions: {
    "decimals(address,address)": FunctionFragment;
    "description(address,address)": FunctionFragment;
    "feedDisabled()": FunctionFragment;
    "getFeed(address,address)": FunctionFragment;
    "getFeedFailed()": FunctionFragment;
    "getRoundData(address,address,uint80)": FunctionFragment;
    "isFeedEnabled(address)": FunctionFragment;
    "latestRoundData(address,address)": FunctionFragment;
    "roundId()": FunctionFragment;
    "setAnswer(address,address,int256)": FunctionFragment;
    "setFeedDisabled(bool)": FunctionFragment;
    "setGetFeedFailed(bool)": FunctionFragment;
    "version(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "decimals"
      | "description"
      | "feedDisabled"
      | "getFeed"
      | "getFeedFailed"
      | "getRoundData"
      | "isFeedEnabled"
      | "latestRoundData"
      | "roundId"
      | "setAnswer"
      | "setFeedDisabled"
      | "setGetFeedFailed"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "decimals",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "description",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "feedDisabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeed",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeedFailed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoundData",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isFeedEnabled",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "latestRoundData",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "roundId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAnswer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeedDisabled",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGetFeedFailed",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "version",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feedDisabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFeedFailed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoundData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFeedEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestRoundData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roundId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAnswer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeedDisabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGetFeedFailed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {};
}

export interface MockRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    decimals(
      base: PromiseOrValue<string>,
      quote: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    description(
      base: PromiseOrValue<string>,
      quote: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    feedDisabled(overrides?: CallOverrides): Promise<[boolean]>;

    getFeed(
      base: PromiseOrValue<string>,
      quote: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getFeedFailed(overrides?: CallOverrides): Promise<[boolean]>;

    getRoundData(
      base: PromiseOrValue<string>,
      quote: PromiseOrValue<string>,
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    isFeedEnabled(
      aggregator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    latestRoundData(
      base: PromiseOrValue<string>,
      quote: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    roundId(overrides?: CallOverrides): Promise<[BigNumber]>;

    setAnswer(
      base: PromiseOrValue<string>,
      quote: PromiseOrValue<string>,
      _answer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeedDisabled(
      disabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGetFeedFailed(
      failed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    version(
      base: PromiseOrValue<string>,
      quote: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  decimals(
    base: PromiseOrValue<string>,
    quote: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  description(
    base: PromiseOrValue<string>,
    quote: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  feedDisabled(overrides?: CallOverrides): Promise<boolean>;

  getFeed(
    base: PromiseOrValue<string>,
    quote: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getFeedFailed(overrides?: CallOverrides): Promise<boolean>;

  getRoundData(
    base: PromiseOrValue<string>,
    quote: PromiseOrValue<string>,
    _roundId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

  isFeedEnabled(
    aggregator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  latestRoundData(
    base: PromiseOrValue<string>,
    quote: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

  roundId(overrides?: CallOverrides): Promise<BigNumber>;

  setAnswer(
    base: PromiseOrValue<string>,
    quote: PromiseOrValue<string>,
    _answer: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeedDisabled(
    disabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGetFeedFailed(
    failed: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  version(
    base: PromiseOrValue<string>,
    quote: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    decimals(
      base: PromiseOrValue<string>,
      quote: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    description(
      base: PromiseOrValue<string>,
      quote: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    feedDisabled(overrides?: CallOverrides): Promise<boolean>;

    getFeed(
      base: PromiseOrValue<string>,
      quote: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getFeedFailed(overrides?: CallOverrides): Promise<boolean>;

    getRoundData(
      base: PromiseOrValue<string>,
      quote: PromiseOrValue<string>,
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    isFeedEnabled(
      aggregator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    latestRoundData(
      base: PromiseOrValue<string>,
      quote: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    roundId(overrides?: CallOverrides): Promise<BigNumber>;

    setAnswer(
      base: PromiseOrValue<string>,
      quote: PromiseOrValue<string>,
      _answer: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeedDisabled(
      disabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGetFeedFailed(
      failed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    version(
      base: PromiseOrValue<string>,
      quote: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    decimals(
      base: PromiseOrValue<string>,
      quote: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    description(
      base: PromiseOrValue<string>,
      quote: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feedDisabled(overrides?: CallOverrides): Promise<BigNumber>;

    getFeed(
      base: PromiseOrValue<string>,
      quote: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeedFailed(overrides?: CallOverrides): Promise<BigNumber>;

    getRoundData(
      base: PromiseOrValue<string>,
      quote: PromiseOrValue<string>,
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFeedEnabled(
      aggregator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestRoundData(
      base: PromiseOrValue<string>,
      quote: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    roundId(overrides?: CallOverrides): Promise<BigNumber>;

    setAnswer(
      base: PromiseOrValue<string>,
      quote: PromiseOrValue<string>,
      _answer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeedDisabled(
      disabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGetFeedFailed(
      failed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    version(
      base: PromiseOrValue<string>,
      quote: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    decimals(
      base: PromiseOrValue<string>,
      quote: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    description(
      base: PromiseOrValue<string>,
      quote: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feedDisabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFeed(
      base: PromiseOrValue<string>,
      quote: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeedFailed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoundData(
      base: PromiseOrValue<string>,
      quote: PromiseOrValue<string>,
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFeedEnabled(
      aggregator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestRoundData(
      base: PromiseOrValue<string>,
      quote: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roundId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAnswer(
      base: PromiseOrValue<string>,
      quote: PromiseOrValue<string>,
      _answer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeedDisabled(
      disabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGetFeedFailed(
      failed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    version(
      base: PromiseOrValue<string>,
      quote: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
