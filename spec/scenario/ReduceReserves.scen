
Test "Reduce all reserves and verify effects"
    NewComptroller
    ListedBToken ZRX bZRX initialExchangeRate:1e9
    Prep Geoff 50e18 ZRX bZRX
    Mint Geoff 50e18 bZRX
    Assert Equal (Erc20 bZRX TokenBalance Geoff) (Exactly 500e8) -- 50e18 / 1e9
    Assert Equal (BToken bZRX UnderlyingBalance Geoff) (Exactly 50e18)
    Assert Equal (BToken bZRX ExchangeRate) (Exactly 1e9)
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest ZRX bZRX 10e18 5e18 interestRate:0.000001 blocks:500000 reserveRate:0.2
    -- We've accrued .0001% interest for 500000 blocks, or 50% of the principal (10e18),
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   The reserves should get 20% of this, or 1e18, and the rest
    --   is due pro-rata to all suppliers. We just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Erc20 ZRX TokenBalance bZRX) (Exactly 55e18)
    Assert Equal (Erc20 ZRX TokenBalance Root) (Exactly 0e18)
    Assert Equal (Erc20 bZRX TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (BToken bZRX Reserves) (Exactly 1e18)
    Assert Equal (BToken bZRX UnderlyingBalance Geoff) (Exactly 54e18)
    -- (55.0e18+0.0e18-1.0e18)/500.0e8
    Assert Equal (BToken bZRX ExchangeRate) (Exactly 1.08e9)
    -- Now, let's pull out all of our reserves (1e18)
    ReduceReserves 1e18 bZRX
    Assert Equal (Erc20 ZRX TokenBalance bZRX) (Exactly 54e18)
    Assert Equal (Erc20 ZRX TokenBalance Root) (Exactly 1e18)
    Assert Equal (Erc20 bZRX TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (BToken bZRX Reserves) (Exactly 0e18)
    Assert Equal (BToken bZRX UnderlyingBalance Geoff) (Exactly 54e18)
    -- (54.0e18+0.0e18-0.0e18)/500.0e8
    Assert Equal (BToken bZRX ExchangeRate) (Exactly 1.08e9)

Test "Reduce partial reserves and verify effects"
    NewComptroller
    ListedBToken ZRX bZRX initialExchangeRate:1e9
    Prep Geoff 50e18 ZRX bZRX
    Mint Geoff 50e18 bZRX
    Assert Equal (Erc20 bZRX TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (BToken bZRX UnderlyingBalance Geoff) (Exactly 50e18)
    Assert Equal (BToken bZRX ExchangeRate) (Exactly 1e9)
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest ZRX bZRX 10e18 5e18 interestRate:0.000001 blocks:500000 reserveRate:0.2
    -- We've accrued .0001% interest for 500000 blocks, or 50% of the principal (10e18),
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   The reserves should get 20% of this, or 1e18, and the rest
    --   is due pro-rata to all suppliers. We just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Erc20 ZRX TokenBalance bZRX) (Exactly 55e18)
    Assert Equal (Erc20 ZRX TokenBalance Root) (Exactly 0e18)
    Assert Equal (Erc20 bZRX TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (BToken bZRX Reserves) (Exactly 1e18)
    Assert Equal (BToken bZRX UnderlyingBalance Geoff) (Exactly 54e18)
    -- (55.0e18+0.0e18-1.0e18)/500.0e8
    Assert Equal (BToken bZRX ExchangeRate) (Exactly 1.08e9)
    -- Now, let's pull out all of our reserves (1e18)
    ReduceReserves 0.5e18 bZRX
    Assert Equal (Erc20 ZRX TokenBalance bZRX) (Exactly 54.5e18)
    Assert Equal (Erc20 ZRX TokenBalance Root) (Exactly 0.5e18)
    Assert Equal (Erc20 bZRX TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (BToken bZRX Reserves) (Exactly 0.5e18)
    Assert Equal (BToken bZRX UnderlyingBalance Geoff) (Exactly 54e18)
    -- (54.5e18+0.5e18-0.0e18)/500.0e8
    Assert Equal (BToken bZRX ExchangeRate) (Exactly 1.08e9)

Test "Redeem all and then reduce all reserves"
    NewComptroller
    ListedBToken ZRX bZRX initialExchangeRate:1e9
    Prep Geoff 50e18 ZRX bZRX
    Mint Geoff 50e18 bZRX
    Assert Equal (Erc20 bZRX TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (BToken bZRX UnderlyingBalance Geoff) (Exactly 50e18)
    Assert Equal (BToken bZRX ExchangeRate) (Exactly 1e9)
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest ZRX bZRX 10e18 5e18 interestRate:0.000001 blocks:500000 reserveRate:0.2
    -- We've accrued .0001% interest for 500000 blocks, or 50% of the principal (10e18),
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   The reserves should get 20% of this, or 1e18, and the rest
    --   is due pro-rata to all suppliers. We just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Erc20 ZRX TokenBalance bZRX) (Exactly 55e18)
    Assert Equal (Erc20 ZRX TokenBalance Root) (Exactly 0e18)
    Assert Equal (Erc20 bZRX TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (BToken bZRX Reserves) (Exactly 1e18)
    Assert Equal (BToken bZRX UnderlyingBalance Geoff) (Exactly 54e18)
    -- (55.0e18+0.0e18-1.0e18)/500.0e8
    Assert Equal (BToken bZRX ExchangeRate) (Exactly 1.08e9)
    -- Now let's redeem all
    Redeem Geoff 500e8 bZRX
    -- Check our values
    Assert Equal (Erc20 ZRX TokenBalance Geoff) (Exactly 54e18)
    Assert Equal (Erc20 ZRX TokenBalance bZRX) (Exactly 1e18)
    Assert Equal (Erc20 ZRX TokenBalance Root) (Exactly 0e18)
    Assert Equal (Erc20 bZRX TokenBalance Geoff) (Exactly 0e8)
    Assert Equal (BToken bZRX Reserves) (Exactly 1e18)
    Assert Equal (BToken bZRX UnderlyingBalance Geoff) (Exactly 0e18)
    -- 0 tokens implies initial exchange rate
    Assert Equal (BToken bZRX ExchangeRate) (Exactly 1e9)
    -- Then now, let's pull out all of our reserves (1e18)
    ReduceReserves 1e18 bZRX
    Assert Equal (Erc20 ZRX TokenBalance Geoff) (Exactly 54e18)
    Assert Equal (Erc20 ZRX TokenBalance bZRX) (Exactly 0e18)
    Assert Equal (Erc20 ZRX TokenBalance Root) (Exactly 1e18)
    Assert Equal (Erc20 bZRX TokenBalance Geoff) (Exactly 0e8)
    Assert Equal (BToken bZRX Reserves) (Exactly 0e18)
    Assert Equal (BToken bZRX UnderlyingBalance Geoff) (Exactly 0e18)
    -- 0 tokens implies initial exchange rate
    Assert Equal (BToken bZRX ExchangeRate) (Exactly 1e9)

Test "Reduce reserves WBTC when paused"
    NewComptroller
    ListedBToken WBTC bWBTC initialExchangeRate:1e9 tokenType:WBTC
    Prep Geoff 50e18 WBTC bWBTC
    Mint Geoff 50e18 bWBTC
    Assert Equal (Erc20 bWBTC TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (BToken bWBTC UnderlyingBalance Geoff) (Exactly 50e18)
    Assert Equal (BToken bWBTC ExchangeRate) (Exactly 1e9)
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest WBTC bWBTC 10e18 5e18 interestRate:0.000001 blocks:500000 reserveRate:0.2
    -- We've accrued .0001% interest for 500000 blocks, or 50% of the principal (10e18),
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   The reserves should get 20% of this, or 1e18, and the rest
    --   is due pro-rata to all suppliers. We just have one, so
    --   let's check that account is given correct new balance.
    Invariant Remains (Erc20 WBTC TokenBalance bWBTC) (Exactly 55e18)
    Invariant Remains (Erc20 WBTC TokenBalance Root) (Exactly 0e18)
    Invariant Remains (Erc20 bWBTC TokenBalance Geoff) (Exactly 500e8)
    Invariant Remains (BToken bWBTC Reserves) (Exactly 1e18)
    Invariant Remains (BToken bWBTC UnderlyingBalance Geoff) (Exactly 54e18)
    -- (55.0e18+0.0e18-1.0e18)/500.0e8
    Invariant Remains (BToken bWBTC ExchangeRate) (Exactly 1.08e9)
    -- Now, let's pull out all of our reserves (1e18)
    Erc20 WBTC Pause
    AllowFailures
    ReduceReserves 1e18 bWBTC
    Assert Revert
