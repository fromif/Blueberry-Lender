-- Tests for repaying borrows

Macro NewBorrow borrowAmount borrowRate
    NewComptroller price:1.0 -- TODO: This should really be a price for a specific asset
    NewBToken ZRX bZRX
    NewBToken BAT bBAT borrowRate -- note: cannot use macros with named args right now
    GiveBToken bBAT 10e18 BAT -- Faucet some bat to borrow
    Support bZRX collateralFactor:0.5
    Support bBAT collateralFactor:0.5
    Prep Geoff Some ZRX bZRX
    Mint Geoff 100e18 bZRX
    EnterMarkets Geoff bZRX bBAT
    Borrow Geoff borrowAmount bBAT

Test "Borrow, hold a few blocks, and repay part"
    NewBorrow borrowAmount:1e18 borrowRate:0.000005
    Assert Equal (BToken bBAT BorrowBalance Geoff) 1e18
    Assert Equal (BToken bBAT TotalBorrowsCurrent) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance bBAT) 9e18
    -- Now let's add some blocks and see what happs
    FastForward 300000 Blocks -- 1e18 * (1 + 300000 * 0.000005)
    Assert Equal (BToken bBAT BorrowBalance Geoff) 2.5e18
    -- Now let's repay one full token
    From Geoff (Erc20 BAT Approve bBAT 1.0e18)
    RepayBorrow Geoff 1.0e18 bBAT
    Assert Equal (BToken bBAT BorrowBalance Geoff) 1.5e18
    -- Let's check the overall numbers
    Assert Equal (Erc20 BAT TokenBalance Geoff) Zero
    Assert Equal (Erc20 BAT TokenBalance bBAT) 10e18
    Assert Equal (BToken bBAT TotalBorrowsCurrent) 1.5e18
    FastForward 200000 Blocks -- 1.5e18 * (1 + 200000 * 0.000005)
    Assert Equal (BToken bBAT BorrowBalance Geoff) 3e18
    Assert Equal (BToken bBAT TotalBorrowsCurrent) 3e18

Test "Borrow, hold a few blocks, and repay full"
    NewBorrow borrowAmount:1e18 borrowRate:0.000005
    Assert Equal (BToken bBAT BorrowBalance Geoff) 1e18
    Assert Equal (BToken bBAT TotalBorrowsCurrent) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance bBAT) 9e18
    -- Now let's add some blocks and see what happs
    FastForward 300000 Blocks -- 1e18 * (1 + 300000 * 0.000005)
    Assert Equal (BToken bBAT BorrowBalance Geoff) 2.5e18
    -- Now let's repay fully
    Give Geoff 1.5e18 BAT -- Geoff had the 1.0e18 borrowed BAT
    From Geoff (Erc20 BAT Approve bBAT 2.5e18)
    RepayBorrow Geoff 2.5e18 bBAT
    Assert Equal (BToken bBAT BorrowBalance Geoff) 0e18
    -- Let's check the overall numbers
    Assert Equal (Erc20 BAT TokenBalance Geoff) 0e18
    Assert Equal (Erc20 BAT TokenBalance bBAT) 11.5e18
    Assert Equal (BToken bBAT TotalBorrowsCurrent) 0e18
    FastForward 200000 Blocks -- 0e18 * (1 + 200000 * 0.000005)
    Assert Equal (BToken bBAT BorrowBalance Geoff) 0e18
    Assert Equal (BToken bBAT TotalBorrowsCurrent) 0e18

Test "Borrow, hold a few blocks, and repay too much"
    NewBorrow borrowAmount:1e18 borrowRate:0.000005
    Assert Equal (BToken bBAT BorrowBalance Geoff) 1e18
    Assert Equal (BToken bBAT TotalBorrowsCurrent) 1e18
    -- Now let's add some blocks and see what happs
    FastForward 300000 Blocks -- 0.001e18 * (1 + 300000 * 0.000005)
    Assert Equal (BToken bBAT BorrowBalance Geoff) 2.5e18
    -- Now let's repay fully
    AllowFailures
    Prep Geoff 10e18 BAT bBAT
    Expect Changes (Erc20 BAT TokenBalance Geoff) Zero
    Expect Changes (Erc20 BAT TokenBalance bBAT) Zero
    RepayBorrow Geoff 10e18 bBAT
    Assert Revert "revert subtraction underflow"
    -- Let's check the overall numbers
    Assert Equal (BToken bBAT BorrowBalance Geoff) 2.5e18
    Assert Equal (BToken bBAT TotalBorrowsCurrent) 2.5e18

Test "Borrow, and get a negative total cash situation"
    Invariant Success
    NewBorrow borrowAmount:1e18 borrowRate:0.000005
    Assert Equal (BToken bBAT BorrowBalance Geoff) 1e18
    Assert Equal (BToken bBAT TotalBorrowsCurrent) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance bBAT) 9e18
    -- Let's zoom way forward into the future
    FastForward 9800000 Blocks -- 1e18 * (1 + 9800000 * 0.000005)
    Assert Equal (BToken bBAT BorrowBalance Geoff) 50e18
    Assert Equal (BToken bBAT TotalBorrowsCurrent) 50e18
    -- Now let's repay one full token
    From Geoff (Erc20 BAT Approve bBAT 1.0e18)
    RepayBorrow Geoff 1.0e18 bBAT
    Assert Equal (BToken bBAT BorrowBalance Geoff) 49e18
    Assert Equal (BToken bBAT TotalBorrowsCurrent) 49e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 0e18
    Assert Equal (Erc20 BAT TokenBalance bBAT) 10e18

Test "Borrow, hold a few blocks, and repay behalf part"
    Invariant Success
    NewBorrow borrowAmount:1e18 borrowRate:0.000005
    Assert Equal (BToken bBAT BorrowBalance Geoff) 1e18
    Assert Equal (BToken bBAT TotalBorrowsCurrent) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance bBAT) 9e18
    -- Now let's add some blocks and see what happs
    FastForward 300000 Blocks -- 1e18 * (1 + 300000 * 0.000005)
    Assert Equal (BToken bBAT BorrowBalance Geoff) 2.5e18
    -- Now let's repay one full token from another user
    Prep Torrey 1.0e18 BAT bBAT
    RepayBorrowBehalf Torrey Geoff 1.0e18 bBAT
    Assert Equal (BToken bBAT BorrowBalance Torrey) Zero
    Assert Equal (BToken bBAT BorrowBalance Geoff) 1.5e18
    -- Let's check the overall numbers
    Assert Equal (Erc20 BAT TokenBalance Torrey) 0e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance bBAT) 10e18
    Assert Equal (BToken bBAT TotalBorrowsCurrent) 1.5e18
    FastForward 200000 Blocks -- 1.5e18 * (1 + 200000 * 0.000005)
    Assert Equal (BToken bBAT BorrowBalance Torrey) Zero
    Assert Equal (BToken bBAT BorrowBalance Geoff) 3e18
    Assert Equal (BToken bBAT TotalBorrowsCurrent) 3e18

Test "Repay successfully even the market has been soft delisted"
    NewBorrow borrowAmount:1e18 borrowRate:0.000005
    Assert Equal (BToken bBAT BorrowBalance Geoff) 1e18
    Assert Equal (BToken bBAT TotalBorrowsCurrent) 1e18
    -- Now let's add some blocks and see what happs
    FastForward 300000 Blocks -- 1e18 * (1 + 300000 * 0.000005)
    Assert Equal (BToken bBAT BorrowBalance Geoff) 2.5e18
    -- Now let's repay fully
    Prep Geoff 10e18 BAT bBAT
    Expect Changes (Erc20 BAT TokenBalance Geoff) Zero
    Expect Changes (Erc20 BAT TokenBalance bBAT) Zero
    SetCollateralFactor bBAT 0 -- Clear collateral factor
    Comptroller SetPaused "Mint" bBAT True -- Pause
    Comptroller SetPaused "Borrow" bBAT True -- Pause
    Comptroller SetPaused "Flashloan" bBAT True -- Pause
    Comptroller UnList bBAT False -- Delist BAT
    RepayBorrow Geoff 2.5e18 bBAT
    -- Let's check the overall numbers
    Assert Equal (BToken bBAT BorrowBalance Geoff) 0
    Assert Equal (BToken bBAT TotalBorrowsCurrent) 0

Test "Prohibit repay by comptroller for cannot repay on behalf of a credit account"
    NewComptroller price:1.0
    NewBToken BAT bBAT
    GiveBToken bBAT 10e18 BAT -- Faucet some bat to borrow
    Support bBAT collateralFactor:0.5
    Comptroller SetCreditLimit Geoff bBAT 100e18
    Borrow Geoff 1e18 bBAT
    Assert Equal (bToken bBAT BorrowBalance Geoff) (Exactly 1e18)
    Assert Equal (Erc20 BAT TokenBalance Geoff) (Exactly 1e18)
    Assert Equal (Erc20 BAT TokenBalance bBAT) (Exactly 9e18)
    Assert Equal (Comptroller MembershipLength Geoff) (Exactly 1)
    Assert True (Comptroller CheckMembership Geoff bBAT)
    Prep Torrey 1e18 BAT bBAT
    AllowFailures
    RepayBorrowBehalf Torrey Geoff 1e18 bBAT
    Assert Revert "revert cannot repay on behalf of credit account"

Test "Repay fails with insufficient allowance"
    NewBorrow borrowAmount:1e18 borrowRate:0.000005
    Assert Equal (BToken bBAT BorrowBalance Geoff) 1e18
    Assert Equal (BToken bBAT TotalBorrowsCurrent) 1e18
    -- Now let's add some blocks and see what happs
    FastForward 300000 Blocks -- 1e18 * (1 + 300000 * 0.000005)
    Assert Equal (BToken bBAT BorrowBalance Geoff) 2.5e18
    -- Now let's repay fully
    AllowFailures
    Prep Geoff 100e18 BAT bBAT allowanceAmount:1.5e18
    Expect Changes (Erc20 BAT TokenBalance Geoff) Zero
    Expect Changes (Erc20 BAT TokenBalance bBAT) Zero
    RepayBorrow Geoff 2.5e18 bBAT
    Assert Revert "revert Insufficient allowance"
    -- Let's check the overall numbers
    Assert Equal (BToken bBAT BorrowBalance Geoff) 2.5e18
    Assert Equal (BToken bBAT TotalBorrowsCurrent) 2.5e18

Test "Repay fails with insufficient balance"
    NewBorrow borrowAmount:1e18 borrowRate:0.000005
    Assert Equal (BToken bBAT BorrowBalance Geoff) 1e18
    Assert Equal (BToken bBAT TotalBorrowsCurrent) 1e18
    -- Now let's add some blocks and see what happs
    FastForward 300000 Blocks -- 1e18 * (1 + 300000 * 0.000005)
    Assert Equal (BToken bBAT BorrowBalance Geoff) 2.5e18
    -- Now let's repay fully
    AllowFailures
    Prep Geoff 0e18 BAT bBAT allowanceAmount:2.5e18
    Expect Changes (Erc20 BAT TokenBalance Geoff) Zero
    Expect Changes (Erc20 BAT TokenBalance bBAT) Zero
    RepayBorrow Geoff 2.5e18 bBAT
    Assert Revert "revert Insufficient balance"
    -- Let's check the overall numbers
    Assert Equal (BToken bBAT BorrowBalance Geoff) 2.5e18
    Assert Equal (BToken bBAT TotalBorrowsCurrent) 2.5e18
