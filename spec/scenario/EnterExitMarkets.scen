-- Enter and Exit Markets Tests

Test "Enter Markets Idempotent"
	NewComptroller
	Assert Equal (Comptroller MembershipLength Geoff) Zero
	Assert Equal (Comptroller AssetsIn Geoff) []
	ListedBToken ZRX bZRX
	EnterMarkets Geoff bZRX
	Assert Log MarketEntered (bToken (Address bZRX)) (account (Address Geoff))
	Assert Equal (Comptroller MembershipLength Geoff) (Exactly 1)
	Assert True (Comptroller CheckMembership Geoff bZRX)
	ListedBToken OMG bOMG
	EnterMarkets Geoff bZRX bOMG
	Assert Equal (Comptroller MembershipLength Geoff) (Exactly 2)
	Assert True (Comptroller CheckMembership Geoff bZRX)
	Assert True (Comptroller CheckMembership Geoff bOMG)
	Assert Equal (Comptroller AssetsIn Geoff) [(Address bZRX) (Address bOMG)]

Test "Entered Market Must Be Supported"
	NewComptroller
	Assert Equal (Comptroller MembershipLength Geoff) Zero
	ListedBToken ZRX bZRX
	EnterMarkets Geoff bZRX
	Assert Equal (Comptroller MembershipLength Geoff) (Exactly 1)
	NewBToken OMG bOMG
	HoldInvariants
	EnterMarkets Geoff bZRX bOMG
	Assert Revert "revert market not listed"
	Assert Equal (Comptroller MembershipLength Geoff) (Exactly 1)
	Assert True (Comptroller CheckMembership Geoff bZRX)
	Assert False (Comptroller CheckMembership Geoff bOMG)
	Support bOMG
	EnterMarkets Geoff bZRX bOMG
	Assert Equal (Comptroller MembershipLength Geoff) (Exactly 2)
	Assert True (Comptroller CheckMembership Geoff bZRX)
	Assert True (Comptroller CheckMembership Geoff bOMG)

Test "Exit single market"
	NewComptroller
	ListedBToken ZRX bZRX
	EnterMarkets Geoff bZRX
	Assert Equal (Comptroller AssetsIn Geoff) [(Address bZRX)]
	ExitMarket Geoff bZRX
	Assert Equal (Comptroller AssetsIn Geoff) []

Test "Exit non-entered market"
	NewComptroller
	ListedBToken ZRX bZRX
	ExitMarket Geoff bZRX
	Assert Equal (Comptroller AssetsIn Geoff) []

Test "Exit one of two market from the front"
	NewComptroller
	ListedBToken ZRX bZRX
	ListedBToken OMG bOMG
	EnterMarkets Geoff bZRX bOMG
	Assert Equal (Comptroller AssetsIn Geoff) [(Address bZRX) (Address bOMG)]
	ExitMarket Geoff bZRX
	Assert Equal (Comptroller AssetsIn Geoff) [(Address bOMG)]

Test "Exit one of two market from the back"
	NewComptroller
	ListedBToken ZRX bZRX
	ListedBToken OMG bOMG
	EnterMarkets Geoff bZRX bOMG
	Assert Equal (Comptroller AssetsIn Geoff) [(Address bZRX) (Address bOMG)]
	ExitMarket Geoff bOMG
	Assert Equal (Comptroller AssetsIn Geoff) [(Address bZRX)]

Test "Exit multiple markets"
	NewComptroller
	ListedBToken ZRX bZRX
	ListedBToken OMG bOMG
	ListedBToken BAT bBAT
	ListedBToken REP bREP
	ListedBToken DAI bDAI
	EnterMarkets Geoff bZRX bOMG bBAT bREP bDAI
	Assert Equal (Comptroller AssetsIn Geoff) [(Address bZRX) (Address bOMG) (Address bBAT) (Address bREP) (Address bDAI)]
	ExitMarket Geoff bZRX
	Assert Equal (Comptroller AssetsIn Geoff) [(Address bDAI) (Address bOMG) (Address bBAT) (Address bREP)]
	ExitMarket Geoff bREP
	Assert Equal (Comptroller AssetsIn Geoff) [(Address bDAI) (Address bOMG) (Address bBAT)]
	ExitMarket Geoff bOMG
	Assert Equal (Comptroller AssetsIn Geoff) [(Address bDAI) (Address bBAT)]
	ExitMarket Geoff bDAI
	Assert Equal (Comptroller AssetsIn Geoff) [(Address bBAT)]
	ExitMarket Geoff bBAT
	Assert Equal (Comptroller AssetsIn Geoff) []

Test "Realistic Market Scenario"
	PricedComptroller
	ListedBToken ZRX bZRX
	SetPriceCF bZRX 0.002 0.4
	ListedEtherToken bETH
	Comptroller SetCollateralFactor bEth 0.8
	ListedBToken BAT bBAT
	NewBToken BAT bBAT
	Comptroller SupportMarket bBAT 0
	SetPriceCF bBAT 0.0015 0.3
	-- Mint some bZRX and bETH
	Prep Geoff 1250e18 ZRX bZRX
	Mint Geoff 1250e18 bZRX -- Liquidity -> 0.4 * 0.002 * 1250e18 = 1.0e18
	SendMintEth Geoff 2.5e18 bETH -- Liqiuidity -> 0.8 * 1.0 * 2.5e18 = 2.0e18
	-- Check liquidity is zero when not in any markets
	Assert Equal (Comptroller Liquidity Geoff) Zero
	-- Enter ZRX and check liquidity
	EnterMarkets Geoff bZRX
	Assert Equal (Comptroller Liquidity Geoff) 1.0e18
	-- Fail to borrow BAT due to liquidity
	GiveBToken bBAT 1000e18 BAT
	HoldInvariants
	Borrow Geoff 1000e18 bBAT -- 1000e18 * 0.0015 = 1.5e18 required liquidity
							  -- But since we're only in ZRX, we only have 1.0e18 liquidity
	Assert Revert "revert insufficient liquidity"
	-- Enter bETH and check liquidity
	EnterMarkets Geoff bETH
	Assert Equal (Comptroller Liquidity Geoff) 3.0e18 -- Sum of bETH and bZRX liquidity from above
	-- Borrow previous BAT amount given liquidity
	Borrow Geoff 1000e18 bBAT
	Assert Equal (Comptroller Liquidity Geoff) 1.5e18 -- Less the borrow amount's toll
	-- Try to exit a eth market but fail due to given borrow requiring eth as collateral
	HoldInvariants
	ExitMarket Geoff bETH
	Assert Revert "revert insufficient liquidity"
	Assert Equal (Comptroller AssetsIn Geoff) [(Address bZRX) (Address bETH) (Address bBAT)]
	-- Repay some borrow and exit market OMG
	Allow Geoff bBAT
	RepayBorrow Geoff 500e18 bBAT
	Assert Equal (Comptroller Liquidity Geoff) 2.25e18 -- With 0.75e18 repaid
	ExitMarket Geoff bETH
	Assert Equal (Comptroller AssetsIn Geoff) [(Address bZRX) (Address bBAT)]
	Assert Equal (Comptroller Liquidity Geoff) 0.25e18 -- Less Eth's 2.0e18 collateral weight
	-- Try and exit bBAT (firist without, then after, repaying)
	HoldInvariants
	ExitMarket Geoff bBAT
	Assert Revert "revert nonzero borrow balance"
	RepayBorrow Geoff UInt256Max bBAT
	ExitMarket Geoff bBAT
	Assert Equal (Comptroller AssetsIn Geoff) [(Address bZRX)]
	Assert Equal (Comptroller Liquidity Geoff) 1.0e18 -- Back to just bZRX
	-- Exit bZRX
	ExitMarket Geoff bZRX
	Assert Equal (Comptroller AssetsIn Geoff) []
	Assert Equal (Comptroller Liquidity Geoff) 0e18 -- Back to nothing
