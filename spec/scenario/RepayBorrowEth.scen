-- Tests for repaying borrows

Macro SetupBorrow borrowRate
    NewComptroller price:1.0 -- TODO: This should really be a price for a specific asset
    ListedEtherToken bETH borrowRate 0.005e9
    ListedBToken ZRX bZRX borrowRate
    SetCollateralFactor bZRX collateralFactor:0.5
    SetCollateralFactor bETH collateralFactor:0.5
    Donate bETH 0.003e18
    Prep Geoff Some ZRX bZRX
    Mint Geoff 100e18 bZRX
    EnterMarkets Geoff bZRX bETH

Macro NewBorrowEth borrowAmount borrowRate
    SetupBorrow borrowRate
    Borrow Geoff borrowAmount bETH

Test "Borrow, hold a few blocks, and repay part"
    NewBorrowEth borrowAmount:0.001e18 borrowRate:0.000005
    Assert Equal (BToken bETH BorrowBalance Geoff) 0.001e18
    Assert Equal (BToken bETH TotalBorrowsCurrent) 0.001e18
    -- Now let's add some blocks and see what happs
    FastForward 300000 Blocks -- 0.001e18 * (1 + 300000 * 0.000005)
    Assert Equal (BToken bETH BorrowBalance Geoff) 0.0025e18
    -- Now let's repay one full token
    Expect Changes (EtherBalance Geoff) -0.001e18
    Expect Changes (EtherBalance bETH) +0.001e18
    RepayBorrowEth Geoff 0.001e18 bETH
    ---- Let's check the overall numbers
    Assert Equal (BToken bETH BorrowBalance Geoff) 0.0015e18
    Assert Equal (BToken bETH TotalBorrowsCurrent) 0.0015e18
    FastForward 200000 Blocks -- 0.0015e18 * (1 + 2000 * 0.000005)
    Assert Equal (BToken bETH BorrowBalance Geoff) 0.003e18
    Assert Equal (BToken bETH TotalBorrowsCurrent) 0.003e18

Test "Don't borrow and then do repay"
    SetupBorrow borrowRate:0.000005
    Assert Equal (BToken bETH BorrowBalance Geoff) Zero
    Assert Equal (BToken bETH TotalBorrowsCurrent) Zero
    -- Now let's add some blocks and see what happs
    FastForward 300000 Blocks -- 0 * (1 + 300000 * 0.000005)
    Assert Equal (BToken bETH BorrowBalance Geoff) Zero
    -- Now let's repay one full token
    Expect Changes (EtherBalance Geoff) Zero
    Expect Changes (EtherBalance bETH) Zero
    RepayBorrowEth Geoff 0 bETH
    ---- Let's check the overall numbers
    Assert Equal (BToken bETH BorrowBalance Geoff) Zero
    Assert Equal (BToken bETH TotalBorrowsCurrent) Zero

Test "Borrow, hold a few blocks, and repay full"
    NewBorrowEth borrowAmount:0.001e18 borrowRate:0.000005
    Assert Equal (BToken bETH BorrowBalance Geoff) 0.001e18
    Assert Equal (BToken bETH TotalBorrowsCurrent) 0.001e18
    -- Now let's add some blocks and see what happs
    FastForward 300000 Blocks -- 0.001e18 * (1 + 300000 * 0.000005)
    Assert Equal (BToken bETH BorrowBalance Geoff) 0.0025e18
    -- Now let's repay fully
    Expect Changes (EtherBalance Geoff) -0.0025e18
    Expect Changes (EtherBalance bETH) +0.0025e18
    RepayBorrowEth Geoff 0.0025e18 bETH
    -- Let's check the overall numbers
    Assert Equal (BToken bETH BorrowBalance Geoff) Zero
    Assert Equal (BToken bETH TotalBorrowsCurrent) Zero
    FastForward 200000 Blocks -- 0e18 * (1 + 200000 * 0.000005)
    Assert Equal (BToken bETH BorrowBalance Geoff) Zero
    Assert Equal (BToken bETH TotalBorrowsCurrent) Zero

Test "Borrow, hold a few blocks, and repay too much"
    NewBorrowEth borrowAmount:0.001e18 borrowRate:0.000005
    Assert Equal (BToken bETH BorrowBalance Geoff) 0.001e18
    Assert Equal (BToken bETH TotalBorrowsCurrent) 0.001e18
    -- Now let's add some blocks and see what happs
    FastForward 300000 Blocks -- 0.001e18 * (1 + 300000 * 0.000005)
    Assert Equal (BToken bETH BorrowBalance Geoff) 0.0025e18
    -- Now let's repay fully
    Expect Changes (EtherBalance Geoff) Zero
    Expect Changes (EtherBalance bETH) Zero
    -- TODO: This currently drains the sent-eth
    AllowFailures
    RepayBorrowEth Geoff 1.0e18 bETH
    Assert Revert "revert subtraction underflow"
    -- Let's check the overall numbers
    Assert Equal (BToken bETH BorrowBalance Geoff) 0.0025e18
    Assert Equal (BToken bETH TotalBorrowsCurrent) 0.0025e18

Test "Borrow, and get a negative total cash situation"
    NewBorrowEth borrowAmount:0.001e18 borrowRate:0.000005
    Assert Equal (BToken bETH BorrowBalance Geoff) 0.001e18
    Assert Equal (BToken bETH TotalBorrowsCurrent) 0.001e18
    -- Let's zoom way forward into the future
    FastForward 9800000 Blocks -- 0.001e18 * (1 + 9800000 * 0.000005)
    Assert Equal (BToken bETH BorrowBalance Geoff) 0.05e18
    Assert Equal (BToken bETH TotalBorrowsCurrent) 0.05e18
    -- Now let's repay one bit
    RepayBorrowEth Geoff 0.001e18 bETH
    Assert Equal (BToken bETH BorrowBalance Geoff) 0.049e18
    Assert Equal (BToken bETH TotalBorrowsCurrent) 0.049e18

Test "Repay successfully even the market has been soft delisted"
    NewBorrowEth borrowAmount:0.001e18 borrowRate:0.000005
    Assert Equal (BToken bETH BorrowBalance Geoff) 0.001e18
    Assert Equal (BToken bETH TotalBorrowsCurrent) 0.001e18
    -- Now let's add some blocks and see what happs
    FastForward 300000 Blocks -- 0.001e18 * (1 + 300000 * 0.000005)
    Assert Equal (BToken bETH BorrowBalance Geoff) 0.0025e18
    -- Now let's repay one full token
    Expect Changes (EtherBalance Geoff) Zero
    Expect Changes (EtherBalance bETH) Zero
    SetCollateralFactor bETH 0 -- Clear collateral factor
    Comptroller SetPaused "Mint" bETH True -- Pause
    Comptroller SetPaused "Borrow" bETH True -- Pause
    Comptroller SetPaused "Flashloan" bETH True -- Pause
    Comptroller UnList bETH False -- Delist bETH
    RepayBorrowEth Geoff 0.001e18 bETH
    ---- Let's check the overall numbers
    Assert Equal (BToken bETH BorrowBalance Geoff) 0.0015e18
    Assert Equal (BToken bETH TotalBorrowsCurrent) 0.0015e18
