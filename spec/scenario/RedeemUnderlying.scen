-- Redeem Tests

Test "Mint then Redeem All"
    NewComptroller
    ListedBToken ZRX bZRX initialExchangeRate:1e9
    Prep Geoff 70e18 ZRX bZRX
    Mint Geoff 50e18 bZRX
    -- Check current affairs
    Assert Equal (Erc20 bZRX TokenBalance Geoff) 500e8
    Assert Equal (Erc20 ZRX TokenBalance Geoff) 20e18
    -- Any other good invariants?
    Invariant Static (BToken bZRX ExchangeRateStored)
    -- Now redeem after some time
    FastForward 2 Blocks
    RedeemUnderlying Geoff 50e18 bZRX
    Assert Equal (Erc20 bZRX TokenBalance Geoff) Zero
    Assert Equal (Erc20 ZRX TokenBalance Geoff) 70e18

Test "Mint then Redeem Part"
    NewComptroller
    ListedBToken ZRX bZRX initialExchangeRate:1e9
    Prep Geoff 70e18 ZRX bZRX
    Mint Geoff 50e18 bZRX
    -- Check current affairs
    Assert Equal (Erc20 bZRX TokenBalance Geoff) 500e8
    Assert Equal (Erc20 ZRX TokenBalance Geoff) 20e18
    -- Any other good invariants?
    Invariant Static (BToken bZRX ExchangeRateStored)
    -- Now redeem after some time
    FastForward 2 Blocks
    RedeemUnderlying Geoff 25e18 bZRX
    Assert Equal (Erc20 bZRX TokenBalance Geoff) 250e8
    Assert Equal (Erc20 ZRX TokenBalance Geoff) 45e18

Test "Mint then Redeem Too Much"
    NewComptroller
    ListedBToken ZRX bZRX initialExchangeRate:1e9
    Prep Geoff 70e18 ZRX bZRX
    Mint Geoff 50e18 bZRX
    Prep Jared 70e18 ZRX bZRX
    Mint Jared 50e18 bZRX
    -- Check and hold static
    Invariant Static (BToken bZRX ExchangeRateStored)
    Invariant Remains (Erc20 bZRX TokenBalance Geoff) 500e8
    Invariant Remains (Erc20 ZRX TokenBalance Geoff) 20e18
    -- Now redeem after some time
    FastForward 2 Blocks
    AllowFailures
    RedeemUnderlying Geoff 50.1e18 bZRX
    Assert Revert "revert subtraction underflow"

Test "Mint then Redeem Zero"
    NewComptroller
    ListedBToken ZRX bZRX initialExchangeRate:1e9
    Prep Geoff 70e18 ZRX bZRX
    Mint Geoff 50e18 bZRX
    -- Check current affairs
    Assert Equal (Erc20 bZRX TokenBalance Geoff) 500e8
    Assert Equal (Erc20 ZRX TokenBalance Geoff) 20e18
    -- Any other good invariants?
    Invariant Static (BToken bZRX ExchangeRateStored)
    -- Now redeem after some time
    FastForward 2 Blocks
    RedeemUnderlying Geoff 0e18 bZRX
    Assert Equal (Erc20 bZRX TokenBalance Geoff) 500e8
    Assert Equal (Erc20 ZRX TokenBalance Geoff) 20e18

Test "Mint then redeem with interest - no reserves"
    NewComptroller
    ListedBToken ZRX bZRX initialExchangeRate:1e9
    Invariant Remains (BToken bZRX Reserves) Zero
    Prep Geoff 50e18 ZRX bZRX
    Mint Geoff 50e18 bZRX
    Assert Equal (Erc20 bZRX TokenBalance Geoff) 500e8
    Assert Equal (BToken bZRX UnderlyingBalance Geoff) 50e18
    Assert Equal (BToken bZRX ExchangeRate) 1e9
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest ZRX bZRX 10e18 5e18 interestRate:0.000001 blocks:500000
    -- We've accrued .001% interest for 500000 blocks, or 50% of the principal,
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   This is due pro-rata to all suppliers, but we just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Erc20 bZRX TokenBalance Geoff) 500e8
    Assert Equal (BToken bZRX UnderlyingBalance Geoff) 55e18
    Assert Equal (BToken bZRX ExchangeRate) 1.1e9
    -- Now redeem all with interest
    -- Exchange rate is now 55e18 รท 50e9 = 1.1e9
    -- 500e9 * 1.1e9 = 55e18
    RedeemUnderlying Geoff 55e18 bZRX
    Assert Equal (Erc20 ZRX TokenBalance Geoff) 55e18
    Assert Equal (Erc20 ZRX TokenBalance bZRX) 0e18
    Assert Equal (Erc20 bZRX TokenBalance Geoff) 0e8
    Assert Equal (BToken bZRX UnderlyingBalance Geoff) 0e18
    Assert Equal (BToken bZRX ExchangeRate) 1e9

Test "Mint then redeem part with interest - no reserves"
    NewComptroller
    ListedBToken ZRX bZRX initialExchangeRate:1e9
    Invariant Remains (BToken bZRX Reserves) Zero
    Prep Geoff 50e18 ZRX bZRX
    Mint Geoff 50e18 bZRX
    Assert Equal (Erc20 bZRX TokenBalance Geoff) 500e8
    Assert Equal (BToken bZRX UnderlyingBalance Geoff) 50e18
    Assert Equal (BToken bZRX ExchangeRate) 1e9
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest ZRX bZRX 10e18 5e18 interestRate:0.000001 blocks:500000
    -- We've accrued .001% interest for 500000 blocks, or 50% of the principal,
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   This is due pro-rata to all suppliers, but we just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Erc20 bZRX TokenBalance Geoff) 500e8
    Assert Equal (BToken bZRX UnderlyingBalance Geoff) 55e18
    Assert Equal (BToken bZRX ExchangeRate) 1.1e9
    -- Now redeem all with interest
    -- Exchange rate is now 55e18 รท 50e9 = 1.1e9
    -- 499e9 * 1.1e9 = 54.89e18
    RedeemUnderlying Geoff 54.89e18 bZRX
    Assert Equal (Erc20 bZRX TokenBalance Geoff) 1e8
    Assert Equal (BToken bZRX UnderlyingBalance Geoff) 0.11e18
    Assert Equal (BToken bZRX ExchangeRate) 1.1e9

Test "Mint then redeem with reserves and interest"
    NewComptroller
    ListedBToken ZRX bZRX initialExchangeRate:1e9
    Prep Geoff 50e18 ZRX bZRX
    Mint Geoff 50e18 bZRX
    Assert Equal (Erc20 bZRX TokenBalance Geoff) 500e8
    Assert Equal (BToken bZRX UnderlyingBalance Geoff) 50e18
    Assert Equal (BToken bZRX ExchangeRate) 1e9
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest ZRX bZRX 10e18 5e18 interestRate:0.000001 blocks:500000 reserveRate:0.2
    -- We've accrued .001% interest for 500000 blocks, or 50% of the principal,
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   The reserves should get 20% of this, or 1e18, and the rest
    --   is due pro-rata to all suppliers. We just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Erc20 bZRX TokenBalance Geoff) 500e8
    Assert Equal (BToken bZRX Reserves) 1e18
    Assert Equal (BToken bZRX UnderlyingBalance Geoff) 54e18
    -- 55e18 + 0e18 - 1e18 / 500
    Assert Equal (BToken bZRX ExchangeRate) 1.08e9
    -- Now redeem all with interest
    -- Exchange rate is 1.08e9
    -- 500e8 * 1.08e9 = 54e18
    RedeemUnderlying Geoff 54e18 bZRX
    Assert Equal (Erc20 ZRX TokenBalance Geoff) 54e18
    Assert Equal (Erc20 ZRX TokenBalance bZRX) 1e18
    Assert Equal (Erc20 bZRX TokenBalance Geoff) 0e8
    Assert Equal (BToken bZRX Reserves) 1e18
    Assert Equal (BToken bZRX UnderlyingBalance Geoff) 0e18
    Assert Equal (BToken bZRX ExchangeRate) 1e9

Test "Two users Mint, one redeems"
    NewComptroller
    ListedBToken ZRX bZRX initialExchangeRate:1e9
    Prep Geoff Some ZRX bZRX
    Prep Torrey Some ZRX bZRX
    Mint Geoff 2e18 bZRX
    Assert Equal (Erc20 bZRX TokenBalance Geoff) 20e8
    Assert Equal (Erc20 bZRX TotalSupply) 20e8
    Mint Torrey 2e18 bZRX
    Assert Equal (Erc20 bZRX TokenBalance Geoff) 20e8
    Assert Equal (Erc20 bZRX TokenBalance Torrey) 20e8
    Assert Equal (Erc20 bZRX TotalSupply) 40e8
    RedeemUnderlying Torrey 1e18 bZRX
    Assert Equal (Erc20 bZRX TokenBalance Geoff) 20e8
    Assert Equal (Erc20 bZRX TokenBalance Torrey) 10e8
    Assert Equal (Erc20 bZRX TotalSupply) 30e8

Test "Mint then Redeem 1 wei of underlying"
    NewComptroller
    ListedBToken ZRX bZRX initialExchangeRate:1e9
    Prep Geoff 70e18 ZRX bZRX
    Mint Geoff 50e18 bZRX
    AllowFailures
    -- Check current affairs
    Invariant Remains (Erc20 bZRX TokenBalance Geoff) 500e8
    Invariant Remains (Erc20 ZRX TokenBalance Geoff) 20e18
    -- Any other good invariants?
    Invariant Static (BToken bZRX ExchangeRateStored)
    -- Now redeem after some time
    FastForward 2 Blocks
    RedeemUnderlying Geoff 1 bZRX
    Assert Revert "revert redeemTokens zero"
