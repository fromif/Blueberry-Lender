-- These are included in each scenario

Macro Successfully
    Invariant Success

Macro AllowFailures
    ClearInvariants Success

Macro PricedComptroller closeFactor=0.1
    Unitroller Deploy
    PriceOracle Deploy Simple
    PriceOracleProxy Deploy Admin (PriceOracle Address) (Address Zero) (Address Zero)
    ComptrollerImpl Deploy Scenario ScenComptroller
    Unitroller SetPendingImpl ScenComptroller
    ComptrollerImpl ScenComptroller Become
    Comptroller SetCloseFactor closeFactor
    Comptroller SetPriceOracle (PriceOracleProxy Address)

Macro NewComptroller price=1.0 closeFactor=0.1
    Unitroller Deploy
    PriceOracle Deploy Fixed price
    PriceOracleProxy Deploy Admin (PriceOracle Address) (Address Zero) (Address Zero)
    ComptrollerImpl Deploy Scenario ScenComptroller
    Unitroller SetPendingImpl ScenComptroller
    ComptrollerImpl ScenComptroller Become
    Comptroller SetCloseFactor closeFactor
    Comptroller SetPriceOracle (PriceOracleProxy Address)

Macro NewBToken erc20 bToken borrowRate=0.000005 initialExchangeRate=2e9 decimals=8 tokenType=Standard delegatorType=BCollateralCapErc20DelegatorScenario bTokenType=BCollateralCapErc20DelegateScenario admin=Admin becomeImplementationData="0x0"
    Erc20 Deploy tokenType erc20 erc20
    InterestRateModel Deploy Fixed StdInterest borrowRate -- Note: interest rate model probably shouldn't be global
    BTokenDelegate Deploy bTokenType bErc20Delegate
    BToken Deploy delegatorType bToken bToken (Erc20 erc20 Address) (Comptroller Address) (InterestRateModel StdInterest Address) initialExchangeRate decimals admin (BTokenDelegate bErc20Delegate Address) becomeImplementationData

-- Same as NewBToken but does not deploy an ERC20. Used for special ERC20s that are initialized differently
Macro NewBTokenBringERC20 erc20 bToken borrowRate=0.000005 initialExchangeRate=2e9 decimals=8 delegatorType=BCollateralCapErc20DelegatorScenario bTokenType=BCollateralCapErc20DelegateScenario admin=Admin becomeImplementationData="0x0"
    InterestRateModel Deploy Fixed StdInterest borrowRate -- Note: interest rate model probably shouldn't be global
    BTokenDelegate Deploy bTokenType bErc20Delegate
    BToken Deploy delegatorType bToken bToken (Erc20 erc20 Address) (Comptroller Address) (InterestRateModel StdInterest Address) initialExchangeRate decimals admin (BTokenDelegate bErc20Delegate Address) becomeImplementationData

Macro NewBTokenImmutable erc20 bToken borrowRate=0.000005 initialExchangeRate=2e9 decimals=8 tokenType=Standard bTokenType=Scenario admin=Admin
    Erc20 Deploy tokenType erc20 erc20
    InterestRateModel Deploy Fixed StdInterest borrowRate -- Note: interest rate model probably shouldn't be global
    BToken Deploy bTokenType bToken bToken (Erc20 erc20 Address) (Comptroller Address) (InterestRateModel StdInterest Address) initialExchangeRate decimals admin

Macro NewEtherToken bToken borrowRate=0.000005 initialExchangeRate=2e9 decimals=8 admin=Admin
    InterestRateModel Deploy Fixed StdInterest borrowRate -- Note: interest rate model probably shouldn't be global
    BToken Deploy BEtherScenario bToken bToken (Comptroller Address) (InterestRateModel StdInterest Address) initialExchangeRate decimals admin

Macro ListedBToken erc20 bToken borrowRate=0.000005 initialExchangeRate=2e9 decimals=8 tokenType=Standard delegatorType=BCollateralCapErc20DelegatorScenario bTokenType=BCollateralCapErc20DelegateScenario admin=Admin version=1
    NewBToken erc20 bToken borrowRate initialExchangeRate decimals tokenType delegatorType bTokenType admin
    Comptroller SupportMarket bToken version

Macro ListedBTokenImmutable erc20 bToken borrowRate=0.000005 initialExchangeRate=2e9 decimals=8 tokenType=Standard bTokenType=Scenario admin=Admin version=0
    NewBTokenImmutable erc20 bToken borrowRate initialExchangeRate decimals tokenType bTokenType admin
    Comptroller SupportMarket bToken version

Macro ListedEtherToken bToken borrowRate=0.000005 initialExchangeRate=2e9 decimals=8 admin=Admin version=0
    NewEtherToken bToken borrowRate initialExchangeRate decimals admin
    Comptroller SupportMarket bToken version
    PriceOracleProxy Deploy Admin (PriceOracle Address) (Address bETH) (Address Zero)
    Comptroller SetPriceOracle (PriceOracleProxy Address)

Macro ListedEtherTokenMinted bToken borrowRate=0.000005 initialExchangeRate=2e9 decimals=8 admin=Admin version=0
    NewEtherToken bToken borrowRate initialExchangeRate decimals admin
    Comptroller SupportMarket bToken version
    CallMintEth Root 1e18 bToken

Macro SetPriceCF bToken price collateralFactor
    PriceOracle SetPrice bToken price
    Comptroller SetCollateralFactor bToken collateralFactor

Macro Give user amount erc20
    Erc20 erc20 Faucet user amount

Macro GiveBToken bToken amount erc20
    Erc20 erc20 Faucet bToken amount
    BToken bToken Gulp

Macro Donate token amount
    (Trx Value amount (BToken token Donate))

Macro Prep user amount erc20 token allowanceAmount=Nothing
    Erc20 erc20 Faucet user amount
    From user (Erc20 erc20 Approve token (Default allowanceAmount amount))

Macro WETHPrep user amount erc20 token allowanceAmount=Nothing
    From user (Trx GasPrice 0 (Trx Value amount (Erc20 erc20 Deposit)))
    From user (Erc20 erc20 Approve token (Default allowanceAmount amount))

Macro Allow user token
    From user (Erc20 (BToken token Underlying) Approve token UInt256Max)

Macro AccrueInterest token
    BToken token AccrueInterest

Macro Mint user amount token
    From user (BToken token Mint amount)

Macro MintNative user amount token
    From user (Trx GasPrice 0 (Trx Value amount (BToken token MintNative)))

Macro SendMintEth user amount token
    From user (Trx GasPrice 0 (Trx Value amount (Send token amount)))

Macro CallMintEth user amount token
    From user (Trx GasPrice 0 (Trx Value amount (BToken token Mint)))

Macro Redeem user amount token
    From user (BToken token Redeem amount)

Macro RedeemNative user amount token
    Trx GasPrice 0 (From user (BToken token RedeemNative amount))

Macro RedeemEth user amount token
    Trx GasPrice 0 (From user (BToken token Redeem amount))

Macro RedeemUnderlying user amount token
    From user (BToken token RedeemUnderlying amount)

Macro RedeemUnderlyingNative user amount token
    Trx GasPrice 0 (From user (BToken token RedeemUnderlyingNative amount))

Macro RedeemUnderlyingEth user amount token
    Trx GasPrice 0 (From user (BToken token RedeemUnderlying amount))

Macro BorrowEth user amount token
    Trx GasPrice 0 (From user (BToken token Borrow amount))

Macro Borrow user amount token
    From user (BToken token Borrow amount)

Macro BorrowNative user amount token
    Trx GasPrice 0 (From user (BToken token BorrowNative amount))

Macro RepayBorrow user amount token
    From user (BToken token RepayBorrow amount)

Macro RepayBorrowNative user amount token
    From user (Trx GasPrice 0 (Trx Value amount (BToken token RepayBorrowNative)))

Macro RepayBorrowEth user amount token
    From user (Trx GasPrice 0 (Trx Value amount (BToken token RepayBorrow)))

Macro RepayBorrowBehalf user behalf amount token
    From user (BToken token RepayBorrowBehalf behalf amount)

Macro RepayBorrowBehalfNative user behalf amount token
    From user (Trx GasPrice 0 (Trx Value amount (BToken token RepayBorrowBehalfNative behalf)))

Macro Liquidate liquidator _ borrower amount token _ collateral
    From liquidator (BToken token Liquidate borrower collateral amount)

Macro LiquidateEthColl liquidator _ borrower amount token _ collateral
    From liquidator (Trx GasPrice 0 (BToken token Liquidate borrower collateral amount))

Macro LiquidateEthBorrow liquidator _ borrower amount token _ collateral
    From liquidator (Trx GasPrice 0 (Trx Value amount (BToken token Liquidate borrower collateral)))

Macro Seize amount token caller liquidator borrower
    From caller (BToken token Seize liquidator borrower amount)

Macro EvilSeize token amount treasure seizer seizee
    BToken token EvilSeize treasure seizer seizee amount

Macro OldSupport bToken collateralFactor=0.5
    Comptroller OldSupportMarket bToken
    Comptroller SetCollateralFactor bToken collateralFactor

Macro Support bToken collateralFactor=0.5 version=1
    Comptroller SupportMarket bToken version
    Comptroller SetCollateralFactor bToken collateralFactor

Macro SetCollateralFactor bToken collateralFactor=0.5
    Comptroller SetCollateralFactor bToken collateralFactor

Macro AddReserves amount token user=Root
    From user (BToken token AddReserves amount)

Macro ReduceReserves amount token
    BToken token ReduceReserves amount

Macro FastForward n blocks
    Comptroller FastForward n blocks

Macro EnterMarkets user ...markets
    From user (Comptroller EnterMarkets markets)

Macro ExitMarket user market
    From user (Comptroller ExitMarket market)

Macro Transfer from to amount token
    From from (Erc20 token Transfer to amount)

Macro Cash bToken
    Read Erc20 (BToken bToken Underlying) TokenBalance bToken

Macro QuickMint amount bToken from=Me
    Give from amount (BToken bToken Underlying)
    Allow from bToken
    From from (BToken bToken Mint amount)

Macro QuickBorrow amount bToken ...collateral
    From Me (Comptroller EnterMarkets collateral)
    From Me (Comptroller EnterMarkets (bToken))
    From Me (BToken bToken Borrow amount)

-- Macro for performing a borrow with the sole
-- purpose of adding interest to the erc20 market
Macro BorrowAndRepayWithInterest erc20 bToken amount interestAmount interestRate blocks reserveRate=0
    -- TODO: Make invariant success for these?
    -- TODO: Named args as macros
    InterestRateModel Deploy Fixed Std interestRate
    BToken bToken SetInterestRateModel (InterestRateModel Std Address)
    BToken bToken SetReserveFactor reserveRate
    ListedBToken COLLAT cCOLLAT
    Comptroller SetCollateralFactor cCOLLAT 0.9
    Prep Torrey 1e30 COLLAT cCOLLAT
    Mint Torrey 1e30 cCOLLAT
    EnterMarkets Torrey cCOLLAT bToken
    Assert True (Comptroller CheckMembership Torrey cCOLLAT)
    Assert True (Comptroller CheckMembership Torrey bToken)
    Borrow Torrey amount bToken
    -- Cool, we've borrowed, now let's accrue interest then repay all
    FastForward blocks Blocks
    -- RepayBorrow Torrey (BToken BorrowBalance Torrey) bToken
    From Torrey (Erc20 erc20 Approve bToken amount)
    RepayBorrow Torrey amount bToken
    From Torrey (Erc20 erc20 Approve bToken interestAmount)
    Give Torrey interestAmount erc20
    RepayBorrow Torrey interestAmount bToken
    Assert Equal (BToken bToken BorrowBalance Torrey) Zero

-- Macro for performing a borrow with the sole
-- purpose of adding interest to the ether market
Macro BorrowAndRepayEthWithInterest bEther amount interestAmount interestRate blocks reserveRate=0
    -- TODO: Make invariant success for these?
    -- TODO: Named args as macros
    InterestRateModel Deploy Fixed Std interestRate
    BToken bEther SetInterestRateModel (InterestRateModel Std Address)
    BToken bEther SetReserveFactor reserveRate
    ListedBToken COLLAT cCOLLAT
    Comptroller SetCollateralFactor cCOLLAT 0.9
    Prep Torrey 1e30 COLLAT cCOLLAT
    Mint Torrey 1e30 cCOLLAT
    EnterMarkets Torrey cCOLLAT bEther
    Assert True (Comptroller CheckMembership Torrey bCOLLAT)
    Assert True (Comptroller CheckMembership Torrey bEther)
    Borrow Torrey amount bEther
    -- Cool, we've borrowed, now let's accrue interest then repay all
    FastForward blocks Blocks
    -- RepayBorrow Torrey (BToken BorrowBalance Torrey) bEther
    RepayBorrowEth Torrey amount bEther
    RepayBorrowEth Torrey interestAmount bEther
    Assert Equal (BToken bEther BorrowBalance Torrey) Zero
