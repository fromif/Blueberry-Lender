
Macro InKindBorrow borrowAmount borrowRate user=Geoff borrowPrice=1.0 mintAmount=100e18 giveAmount=0e18 borrowTokenType=Standard
    PricedComptroller
    Comptroller LiquidationIncentive 1.1
    NewBToken BAT bBAT borrowRate 2e9 8 borrowTokenType -- note: cannot use macros with named args right now
    GiveBToken bBAT giveAmount BAT -- Faucet some bat
    PriceOracle SetPrice bBAT borrowPrice
    Support bBAT collateralFactor:0.5
    Prep user mintAmount BAT bBAT
    Mint user mintAmount bBAT
    EnterMarkets user bBAT
    Borrow user borrowAmount bBAT

Test "Insufficient in-kind shortfall"
    InKindBorrow borrowAmount:1e18 borrowRate:0.000005
    Assert Equal (BToken bBAT BorrowBalance Geoff) 1e18
    Assert Equal (BToken bBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance bBAT) 99e18
    Assert Equal (Comptroller Liquidity Geoff) 49e18 -- ( ( 1.0 * 100e18 * 0.5 ) - ( 1.0 * 51e18 ) ) / 1e18
    -- Prices are 1:1 (in-kind) and collateral factor is 0.5,
    -- thus supplying 100e18 bBAT gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a lot blocks at a 0.0005% interest rate, he'll be
    -- underwater. Note: with a reserve rate of zero, that
    -- interest will be paid back to himself as supply
    -- but that will be discounted by 50% by the collateral factor.
    -- Thus, we will need to accumulate for twice as many blocks
    -- to end up where we'd usually be underwater
    FastForward 19600000 Blocks -- 1e18 * (1 + 19600000 * 0.000005)
    AccrueInterest bBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Assert Equal (BToken bBAT BorrowBalanceStored Geoff) 99e18
    Assert Equal (BToken bBAT TotalBorrows) 99e18
    -- Check user liquidity and verify equals 0
    Assert Equal (Comptroller Liquidity Geoff) 0e18 -- ( ( 1.0 * ( 100e18 + 98e18 ) * 0.5 ) - ( ( 98 + 1 ) * 1e18 ) ) / 1e18
    -- At exactly zero, should not be able to liquidate
    Prep Torrey 10e18 BAT bBAT
    AllowFailures
    Liquidate Torrey "->" Geoff 10e18 bBAT "Seizing" bBAT
    Assert Revert "revert insufficient shortfall"

Test "Cannot self-in-kind-liquidate"
    InKindBorrow borrowAmount:1e18 borrowRate:0.000005
    Assert Equal (BToken bBAT BorrowBalance Geoff) 1e18
    Assert Equal (BToken bBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance bBAT) 99e18
    Assert Equal (Comptroller Liquidity Geoff) 49e18 -- ( ( 1.0 * 100e18 * 0.5 ) - ( 1.0 * 51e18 ) ) / 1e18
    -- Prices are 1:1 (in-kind) and collateral factor is 0.5,
    -- thus supplying 100e18 bBAT gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a lot blocks at a 0.0005% interest rate, he'll be
    -- underwater. Note: with a reserve rate of zero, that
    -- interest will be paid back to himself as supply
    -- but that will be discounted by 50% by the collateral factor.
    -- Thus, we will need to accumulate for twice as many blocks
    -- to end up where we'd usually be underwater
    FastForward 20000000 Blocks -- 1e18 * (1 + 20000000 * 0.000005)
    AccrueInterest bBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Assert Equal (BToken bBAT BorrowBalanceStored Geoff) 101e18
    Assert Equal (BToken bBAT TotalBorrows) 101e18
    -- Check user liquidity and verify < 0
    Assert Equal (Comptroller Liquidity Geoff) -1e18
    -- Okay, so we should be able to liquidate, so let's do that.
    Prep Geoff 10e18 BAT bBAT
    AllowFailures
    Liquidate Geoff "->" Geoff 2e18 bBAT "Seizing" bBAT
    Assert Revert "revert invalid account pair"

Test "Liquidate in-kind beyond max close"
    InKindBorrow borrowAmount:1e18 borrowRate:0.000005
    Assert Equal (BToken bBAT BorrowBalance Geoff) 1e18
    Assert Equal (BToken bBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance bBAT) 99e18
    Assert Equal (Comptroller Liquidity Geoff) 49e18 -- ( ( 1.0 * 100e18 * 0.5 ) - ( 1.0 * 51e18 ) ) / 1e18
    -- Prices are 1:1 (in-kind) and collateral factor is 0.5,
    -- thus supplying 100e18 bBAT gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a lot blocks at a 0.0005% interest rate, he'll be
    -- underwater. Note: with a reserve rate of zero, that
    -- interest will be paid back to himself as supply
    -- but that will be discounted by 50% by the collateral factor.
    -- Thus, we will need to accumulate for twice as many blocks
    -- to end up where we'd usually be underwater
    FastForward 20000000 Blocks -- 1e18 * (1 + 20000000 * 0.000005)
    AccrueInterest bBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Assert Equal (BToken bBAT BorrowBalanceStored Geoff) 101e18
    Assert Equal (BToken bBAT TotalBorrows) 101e18
    -- Check user liquidity and verify < 0
    Assert Equal (Comptroller Liquidity Geoff) -1e18
    -- Okay, so we should be able to liquidate, so let's do that.
    Prep Torrey 20e18 BAT bBAT
    AllowFailures
    Liquidate Torrey "->" Geoff 20e18 bBAT "Seizing" bBAT
    Assert Revert "revert rejected"

Test "Proper In-Kind Liquidation"
    InKindBorrow borrowAmount:1e18 borrowRate:0.000005
    Assert Equal (BToken bBAT BorrowBalance Geoff) 1e18
    Assert Equal (BToken bBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance bBAT) 99e18
    Assert Equal (Comptroller Liquidity Geoff) 49e18 -- ( ( 1.0 * 100e18 * 0.5 ) - ( 1.0 * 1e18 ) ) / 1e18
    -- Prices are 1:1 (in-kind) and collateral factor is 0.5,
    -- thus supplying 100e18 bBAT gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a lot blocks at a 0.0005% interest rate, he'll be
    -- underwater. Note: with a reserve rate of zero, that
    -- interest will be paid back to himself as supply
    -- but that will be discounted by 50% by the collateral factor.
    -- Thus, we will need to accumulate for twice as many blocks
    -- to end up where we'd usually be underwater
    FastForward 20000000 Blocks -- 1e18 * (1 + 20000000 * 0.000005)
    AccrueInterest bBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Assert Equal (BToken bBAT BorrowBalanceStored Geoff) 101e18
    Assert Equal (BToken bBAT TotalBorrows) 101e18
    -- Check user liquidity and verify < 0
    Assert Equal (Comptroller Liquidity Geoff) -1e18 -- ( ( 1.0 * ( 100e18 + 100e18 ) * 0.5 ) - ( 101 * 1e18 ) ) / 1e18
    -- Okay, so we should be able to liquidate, so let's do that.
    Prep Torrey 2e18 BAT bBAT
    --
    -- Let's check how values start before liquidation
    -- Note: we're going to be some-what exhausive in what we check
    Invariant Remains (Erc20 BAT TokenBalance Geoff) 1e18 -- all was minted, this is what was borrowed
    Assert Equal (Erc20 BAT TokenBalance Torrey) 2e18 -- from prep above
    Assert Equal (Erc20 BAT TokenBalance bBAT) 99e18 -- from minting minus 1e18 lent to geoff
    Assert Equal (Erc20 bBAT TokenBalance Geoff) 50e9 -- from minting
    Assert Equal (Erc20 bBAT TokenBalance Torrey) 0e9 -- never had any
    Invariant Remains (Erc20 BAT TokenBalance Geoff) 1e18 -- original amount borrowed
    Assert Equal (BToken bBAT BorrowBalanceStored Geoff) 101e18 -- all that interest
    Assert Equal (BToken bBAT TotalBorrows) 101e18 -- all those borrowers
    Assert Equal (BToken bBAT ExchangeRate) 4e9 --- XXX: Verify this
    -- Do the liquidation
    Liquidate Torrey "->" Geoff 2e18 bBAT "Seizing" bBAT -- should now take twice as much collateral
    --
    -- And see what they are now
    Assert Equal (BToken bBAT ExchangeRate) 4e9 --- XXX: Verify this
    Assert Equal (Erc20 bBAT TokenBalance Geoff) 49.45e9 -- 1:1 -> 1 x 2e18 x 1.1 รท 4e9 [exchange rate] = 0.55e9 -> Torrey
    Assert Equal (Erc20 bBAT TokenBalance Torrey) 0.55e9 -- didn't have any beforehand
    Assert Equal (Erc20 BAT TokenBalance Torrey) 0e18 -- repaid
    Assert Equal (Erc20 BAT TokenBalance bBAT) 101e18 -- had 100e18, lent 1e18 to geoff, repaid 2
    Assert Equal (BToken bBAT BorrowBalanceStored Geoff) 99e18 -- less closed amount
    Assert Equal (BToken bBAT TotalBorrows) 99e18 --
    -- Prices are 1:1 and collateral factor is 0.5
    -- User now has 49.45e9 outstanding supply (yielding 98.9 borrowing capacity due
    -- to the collateral factor (0.5) and exchange rate (4e9)).
    -- The user also has a 99e18 borrow outstanding which is weighted 1:1.
    -- Thus the liquidity is (98.9-99)e18 or -0.1e18.
    Assert Equal (Comptroller Liquidity Geoff) -0.1e18

Test "Liquidate exactly zero"
    InKindBorrow borrowAmount:1e18 borrowRate:0.000005
    Assert Equal (BToken bBAT BorrowBalance Geoff) 1e18
    Assert Equal (BToken bBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance bBAT) 99e18
    Assert Equal (Comptroller Liquidity Geoff) 49e18 -- ( ( 1.0 * 100e18 * 0.5 ) - ( 1.0 * 1e18 ) ) / 1e18
    -- Prices are 1:1 (in-kind) and collateral factor is 0.5,
    -- thus supplying 100e18 bBAT gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a lot blocks at a 0.0005% interest rate, he'll be
    -- underwater. Note: with a reserve rate of zero, that
    -- interest will be paid back to himself as supply
    -- but that will be discounted by 50% by the collateral factor.
    -- Thus, we will need to accumulate for twice as many blocks
    -- to end up where we'd usually be underwater
    FastForward 20000000 Blocks -- 1e18 * (1 + 20000000 * 0.000005)
    AccrueInterest bBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Invariant Remains (BToken bBAT BorrowBalanceStored Geoff) 101e18
    Invariant Remains (BToken bBAT TotalBorrows) 101e18
    -- Check user liquidity and verify < 0
    Invariant Remains (Comptroller Liquidity Geoff) -1e18
    -- Okay, so we should be able to liquidate, so let's do that.
    Prep Torrey 10e18 BAT bBAT
    AllowFailures
    Liquidate Torrey "->" Geoff 0e18 bBAT "Seizing" bBAT
    Assert Revert "revert invalid amount"

Test "When price oracle for collateral token is zero"
    InKindBorrow borrowAmount:1e18 borrowRate:0.000005
    Assert Equal (BToken bBAT BorrowBalance Geoff) 1e18
    Assert Equal (BToken bBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance bBAT) 99e18
    Assert Equal (Comptroller Liquidity Geoff) 49e18 -- ( ( 1.0 * 100e18 * 0.5 ) - ( 1.0 * 1e18 ) ) / 1e18
    -- Prices are 1:1 (in-kind) and collateral factor is 0.5,
    -- thus supplying 100e18 bBAT gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a lot blocks at a 0.0005% interest rate, he'll be
    -- underwater. Note: with a reserve rate of zero, that
    -- interest will be paid back to himself as supply
    -- but that will be discounted by 50% by the collateral factor.
    -- Thus, we will need to accumulate for twice as many blocks
    -- to end up where we'd usually be underwater
    FastForward 20000000 Blocks -- 1e18 * (1 + 20000000 * 0.000005)
    AccrueInterest bBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Invariant Remains (BToken bBAT BorrowBalanceStored Geoff) 101e18
    Invariant Remains (BToken bBAT TotalBorrows) 101e18
    -- Check user liquidity and verify < 0
    Assert Equal (Comptroller Liquidity Geoff) -1e18
    -- Okay, so we should be able to liquidate, so let's do that.
    Prep Torrey 10e18 BAT bBAT
    PriceOracle SetPrice bBAT 0
    AllowFailures
    Liquidate Torrey "->" Geoff 2e18 bBAT "Seizing" bBAT
    Assert Revert "revert price error"

Test "When price oracle for collateral token is whack"
    InKindBorrow borrowAmount:1e18 borrowRate:0.000005
    Assert Equal (BToken bBAT BorrowBalance Geoff) 1e18
    Assert Equal (BToken bBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance bBAT) 99e18
    Assert Equal (Comptroller Liquidity Geoff) 49e18 -- ( ( 1.0 * 100e18 * 0.5 ) - ( 1.0 * 1e18 ) ) / 1e18
    -- Prices are 1:1 (in-kind) and collateral factor is 0.5,
    -- thus supplying 100e18 bBAT gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a lot blocks at a 0.0005% interest rate, he'll be
    -- underwater. Note: with a reserve rate of zero, that
    -- interest will be paid back to himself as supply
    -- but that will be discounted by 50% by the collateral factor.
    -- Thus, we will need to accumulate for twice as many blocks
    -- to end up where we'd usually be underwater
    FastForward 20000000 Blocks -- 1e18 * (1 + 20000000 * 0.000005)
    AccrueInterest bBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Invariant Remains (BToken bBAT BorrowBalanceStored Geoff) 101e18
    Invariant Remains (BToken bBAT TotalBorrows) 101e18
    -- Check user liquidity and verify < 0
    Assert Equal (Comptroller Liquidity Geoff) -1e18
    -- Okay, so we should be able to liquidate, so let's do that.
    Prep Torrey 10e18 BAT bBAT
    PriceOracle SetPrice bBAT 1.15792e59
    AllowFailures
    Liquidate Torrey "->" Geoff 2e18 bBAT "Seizing" bBAT
    Assert Revert "revert multiplication overflow"

Test "When repay borrow fails"
    InKindBorrow borrowAmount:1e18 borrowRate:0.000005
    Assert Equal (BToken bBAT BorrowBalance Geoff) 1e18
    Assert Equal (BToken bBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance bBAT) 99e18
    Assert Equal (Comptroller Liquidity Geoff) 49e18 -- ( ( 1.0 * 100e18 * 0.5 ) - ( 1.0 * 1e18 ) ) / 1e18
    -- Prices are 1:1 (in-kind) and collateral factor is 0.5,
    -- thus supplying 100e18 bBAT gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a lot blocks at a 0.0005% interest rate, he'll be
    -- underwater. Note: with a reserve rate of zero, that
    -- interest will be paid back to himself as supply
    -- but that will be discounted by 50% by the collateral factor.
    -- Thus, we will need to accumulate for twice as many blocks
    -- to end up where we'd usually be underwater
    FastForward 20000000 Blocks -- 1e18 * (1 + 20000000 * 0.000005)
    AccrueInterest bBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Invariant Remains (BToken bBAT BorrowBalanceStored Geoff) 101e18
    Invariant Remains (BToken bBAT TotalBorrows) 101e18
    -- Check user liquidity and verify < 0
    Invariant Remains (Comptroller Liquidity Geoff) -1e18
    -- Okay, so we should be able to liquidate, so let's do that.
    Prep Torrey 10e18 BAT bBAT allowanceAmount:0.1e18
    AllowFailures
    Liquidate Torrey "->" Geoff 2e18 bBAT "Seizing" bBAT
    Assert Revert "revert Insufficient allowance"

Test "Proper liquidation of paused WBTC as collateral"
    InKindBorrow borrowAmount:1e18 borrowRate:0.000005 borrowTokenType:WBTC
    Assert Equal (BToken bBAT BorrowBalance Geoff) 1e18
    Assert Equal (BToken bBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance bBAT) 99e18
    Assert Equal (Comptroller Liquidity Geoff) 49e18 -- ( ( 1.0 * 100e18 * 0.5 ) - ( 1.0 * 1e18 ) ) / 1e18
    -- Prices are 1:1 (in-kind) and collateral factor is 0.5,
    -- thus supplying 100e18 bBAT gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a lot blocks at a 0.0005% interest rate, he'll be
    -- underwater. Note: with a reserve rate of zero, that
    -- interest will be paid back to himself as supply
    -- but that will be discounted by 50% by the collateral factor.
    -- Thus, we will need to accumulate for twice as many blocks
    -- to end up where we'd usually be underwater
    FastForward 20000000 Blocks -- 1e18 * (1 + 20000000 * 0.000005)
    AccrueInterest bBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Assert Equal (BToken bBAT BorrowBalanceStored Geoff) 101e18
    Assert Equal (BToken bBAT TotalBorrows) 101e18
    -- Check user liquidity and verify < 0
    Assert Equal (Comptroller Liquidity Geoff) -1e18 -- recheck
    -- Okay, so we should be able to liquidate, so let's do that.
    Prep Torrey 2e18 BAT bBAT
    --
    -- Let's check how values start before liquidation
    -- Note: we're going to be some-what exhausive in what we check
    Invariant Remains (Erc20 BAT TokenBalance Geoff) 1e18 -- all was minted, this is what was borrowed
    Assert Equal (Erc20 BAT TokenBalance Torrey) 2e18 -- from prep above
    Assert Equal (Erc20 BAT TokenBalance bBAT) 99e18 -- from minting minus 1e18 lent to geoff
    Assert Equal (Erc20 bBAT TokenBalance Geoff) 50e9 -- from minting
    Assert Equal (Erc20 bBAT TokenBalance Torrey) 0e9 -- never had any
    Invariant Remains (Erc20 BAT TokenBalance Geoff) 1e18 -- original amount borrowed
    Assert Equal (BToken bBAT BorrowBalanceStored Geoff) 101e18 -- all that interest
    Assert Equal (BToken bBAT TotalBorrows) 101e18 -- all those borrowers
    Assert Equal (BToken bBAT ExchangeRate) 4e9 --- XXX: Verify this
    --
    -- Pause "WBTC"
    Erc20 BAT Pause -- Actually a WBTC token
    -- Do the liquidation
    AllowFailures
    Liquidate Torrey "->" Geoff 2e18 bBAT "Seizing" bBAT -- should now take twice as much collateral
    Assert Revert -- Reverts since we can't transfer the BAT in due to pause

Test "When seize a soft delisted collateral"
    InKindBorrow borrowAmount:1e18 borrowRate:0.000005
    Assert Equal (BToken bBAT BorrowBalance Geoff) 1e18
    Assert Equal (BToken bBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance bBAT) 99e18
    Assert Equal (Comptroller Liquidity Geoff) 49e18 -- ( ( 1.0 * 100e18 * 0.5 ) - ( 1.0 * 1e18 ) ) / 1e18
    -- Prices are 1:1 (in-kind) and collateral factor is 0.5,
    -- thus supplying 100e18 bBAT gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a lot blocks at a 0.0005% interest rate, he'll be
    -- underwater. Note: with a reserve rate of zero, that
    -- interest will be paid back to himself as supply
    -- but that will be discounted by 50% by the collateral factor.
    -- Thus, we will need to accumulate for twice as many blocks
    -- to end up where we'd usually be underwater
    FastForward 20000000 Blocks -- 1e18 * (1 + 20000000 * 0.000005)
    AccrueInterest bBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Assert Equal (BToken bBAT BorrowBalanceStored Geoff) 101e18
    Assert Equal (BToken bBAT TotalBorrows) 101e18
    -- Okay, so we should be able to liquidate, so let's do that.
    Prep Torrey 10e18 BAT bBAT
    SetCollateralFactor bBAT 0 -- Clear collateral factor
    Comptroller SetPaused "Mint" bBAT True -- Pause
    Comptroller SetPaused "Borrow" bBAT True -- Pause
    Comptroller SetPaused "Flashloan" bBAT True -- Pause
    Comptroller UnList bBAT False -- Mock unlist collateral
    Liquidate Torrey "->" Geoff 2e18 bBAT "Seizing" bBAT
    Assert Equal (BToken bBAT BorrowBalanceStored Geoff) 99e18
    Assert Equal (BToken bBAT TotalBorrows) 99e18

Test "When repaid a soft delisted borrow"
    InKindBorrow borrowAmount:1e18 borrowRate:0.000005
    Assert Equal (BToken bBAT BorrowBalance Geoff) 1e18
    Assert Equal (BToken bBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance bBAT) 99e18
    Assert Equal (Comptroller Liquidity Geoff) 49e18 -- ( ( 1.0 * 100e18 * 0.5 ) - ( 1.0 * 1e18 ) ) / 1e18
    -- Prices are 1:1 (in-kind) and collateral factor is 0.5,
    -- thus supplying 100e18 bBAT gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a lot blocks at a 0.0005% interest rate, he'll be
    -- underwater. Note: with a reserve rate of zero, that
    -- interest will be paid back to himself as supply
    -- but that will be discounted by 50% by the collateral factor.
    -- Thus, we will need to accumulate for twice as many blocks
    -- to end up where we'd usually be underwater
    FastForward 20000000 Blocks -- 1e18 * (1 + 20000000 * 0.000005)
    AccrueInterest bBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Assert Equal (BToken bBAT BorrowBalanceStored Geoff) 101e18
    Assert Equal (BToken bBAT TotalBorrows) 101e18
    -- Okay, so we should be able to liquidate, so let's do that.
    Prep Torrey 10e18 BAT bBAT
    SetCollateralFactor bBAT 0 -- Clear collateral factor
    Comptroller SetPaused "Mint" bBAT True -- Pause
    Comptroller SetPaused "Borrow" bBAT True -- Pause
    Comptroller SetPaused "Flashloan" bBAT True -- Pause
    Comptroller UnList bBAT False -- Mock unlist borrow
    Liquidate Torrey "->" Geoff 2e18 bBAT "Seizing" bBAT
    Assert Equal (BToken bBAT BorrowBalanceStored Geoff) 99e18
    Assert Equal (BToken bBAT TotalBorrows) 99e18

Test "When there's insufficient collateral"
    InKindBorrow borrowAmount:1e18 borrowRate:0.000005
    Comptroller SetCloseFactor 0.9
    Comptroller LiquidationIncentive 1.5
    Assert Equal (BToken bBAT BorrowBalance Geoff) 1e18
    Assert Equal (BToken bBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance bBAT) 99e18
    Assert Equal (Comptroller Liquidity Geoff) 49e18 -- ( ( 1.0 * 100e18 * 0.5 ) - ( 1.0 * 1e18 ) ) / 1e18
    -- Prices are 1:1 (in-kind) and collateral factor is 0.5,
    -- thus supplying 100e18 bBAT gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a lot blocks at a 0.0005% interest rate, he'll be
    -- underwater. Note: with a reserve rate of zero, that
    -- interest will be paid back to himself as supply
    -- but that will be discounted by 50% by the collateral factor.
    -- Thus, we will need to accumulate for twice as many blocks
    -- to end up where we'd usually be underwater
    FastForward 200000000 Blocks -- 1e18 * (1 + 200000000 * 0.000005)
    AccrueInterest bBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Invariant Remains (BToken bBAT BorrowBalanceStored Geoff) 1001e18
    Invariant Remains (BToken bBAT TotalBorrows) 1001e18
    Comptroller SetCollateralFactor bBAT 0
    -- Check user liquidity and verify < 0
    Invariant Remains (Comptroller Liquidity Geoff) -1001e18
    -- Okay, so we should be able to liquidate, so let's do that.
    Prep Torrey 900e18 BAT bBAT
    AllowFailures
    Liquidate Torrey "->" Geoff 900e18 bBAT "Seizing" bBAT
    Assert Revert "revert seize too much"

Test "when seize is paused"
    InKindBorrow borrowAmount:1e18 borrowRate:0.000005
    Assert Equal (BToken bBAT BorrowBalance Geoff) 1e18
    Assert Equal (BToken bBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance bBAT) 99e18
    Assert Equal (Comptroller Liquidity Geoff) 49e18 -- ( ( 1.0 * 100e18 * 0.5 ) - ( 1.0 * 1e18 ) ) / 1e18
    -- Prices are 1:1 (in-kind) and collateral factor is 0.5,
    -- thus supplying 100e18 bBAT gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a lot blocks at a 0.0005% interest rate, he'll be
    -- underwater. Note: with a reserve rate of zero, that
    -- interest will be paid back to himself as supply
    -- but that will be discounted by 50% by the collateral factor.
    -- Thus, we will need to accumulate for twice as many blocks
    -- to end up where we'd usually be underwater
    FastForward 20000000 Blocks -- 1e18 * (1 + 20000000 * 0.000005)
    AccrueInterest bBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Assert Equal (BToken bBAT BorrowBalanceStored Geoff) 101e18
    Assert Equal (BToken bBAT TotalBorrows) 101e18
    -- Check user liquidity and verify < 0
    Assert Equal (Comptroller Liquidity Geoff) -1e18
    -- Okay, so we should be able to liquidate, so let's do that.
    Prep Torrey 2e18 BAT bBAT
    Comptroller SetGuardian Coburn
    From Coburn (Comptroller SetGuardianPaused "Seize" True)
    AllowFailures
    Liquidate Torrey "->" Geoff 2e18 bBAT "Seizing" bBAT
    Assert Revert "revert seize is paused"
    -- unpause and check correct values
    Invariant Success
    Comptroller SetGuardianPaused "Seize" False
    Liquidate Torrey "->" Geoff 2e18 bBAT "Seizing" bBAT
